

/*
 * MrBayesUI.java
 *
 *
 *
 * Created on Jul 25, 2011, 10:23:58 PM
 */

package br.uesc.computacao.igrafu.apresentacao;


import br.uesc.computacao.igrafu.aplicacao.ExecucaoMrBayes;
import br.uesc.computacao.igrafu.aplicacao.GeraParametrosMrBayes;
import br.uesc.computacao.igrafu.aplicacao.InputSequence;
import br.uesc.computacao.util.ManipulaArquivo;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SpinnerNumberModel;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Classe que desenha o painel de configurações do MrBayes.
 * Possui opções de configuração, execução e visualização.
 *
 * @author Anderson Carlos Sousa e Santos </br>
 * Orientadora: Martha Ximena Torres Delgado
 */
public class MrBayesUI extends javax.swing.JPanel {

    JFrame frame;
    
    /**
     * Creates new form MrBayesUI
     * @param frame  - JFrame com layout em cartão (CardLayout),</br>
     * ao qual o MrBayesUI é adicionado.
     *
     */
    public MrBayesUI(JFrame frame) {
        this.frame = frame;
        this.setImage(getClass().getResource(
                "/br/uesc/computacao/igrafu/apresentacao/resources/dna20zb.jpg")
                                            );
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MatrixRate = new ButtonGroup();
        AdgmmaParamPrior = new ButtonGroup();
        PropinvPrior = new ButtonGroup();
        StartingTree = new ButtonGroup();
        TreeTopologyPrior = new ButtonGroup();
        proteinAdGamma = new ButtonGroup();
        proteinPropinv = new ButtonGroup();
        AdvancedSettingsDialog = new JDialog();
        jPanel1 = new JPanel();
        jLabelMcmcSeed = new JLabel();
        jLabelMcmcSwapSeed = new JLabel();
        jPanelMcmcReweight = new JPanel();
        jLabelMcmcDecrease = new JLabel();
        jLabelMcmcIncrease = new JLabel();
        jLabelMcmcIncrement = new JLabel();
        jSpinnerMcmcDecrease = new JSpinner();
        jSpinnerMcmcIncrease = new JSpinner();
        jSpinnerMcmcIncrement = new JSpinner();
        jSpinnerMcmcSeed = new JSpinner();
        jSpinnerMcmcSwapSeed = new JSpinner();
        jCheckBoxMcmcSaveBrlenght = new JCheckBox();
        jCheckBoxMcmcOrderTaxa = new JCheckBox();
        jPanelMcmcBurnin = new JPanel();
        jRadioButtonMcmcProportionalBurnin = new JRadioButton();
        jRadioButtonMcmcSpecificBurnin = new JRadioButton();
        jLabelMcmcBurninNum = new JLabel();
        jLabelMcmcBurninFraq = new JLabel();
        jSpinnerMcmcBurninFraq = new JSpinner();
        jSpinnerMcmcBurninNum = new JSpinner();
        jButtonMcmcOk = new JButton();
        jButtonMcmcCancel = new JButton();
        ConsensusTree = new ButtonGroup();
        jFileChooserSumParam = new JFileChooser();
        McmcBurnin = new ButtonGroup();
        jFrameExecution = new JFrame();
        jButtonCancelExecution = new JButton();
        jProgressBarExecution = new JProgressBar();
        jLabelOutputMrBayes1 = new JLabel();
        jLabelEstimateExe = new JLabel();
        jLabelOutputMrBayes2 = new JLabel();
        jTabbedPaneConfig = new JTabbedPane();
        jTabbedPaneModel = new JTabbedPane();
        jPanelProtein = new JPanel();
        jLabelProtRateVariation = new JLabel();
        jComboBoxProtRateVariation = new JComboBox();
        jLabelProtGammaCategories = new JLabel();
        jSpinnerProtGammaCategories = new JSpinner();
        jPanelProtAdgmmaParameter = new JPanel();
        jRadioButtonProtAdgammaUniform = new JRadioButton();
        jRadioButtonProtAdgammaFixed = new JRadioButton();
        jSpinnerProtAdgmmaUniform1 = new JSpinner();
        jSpinnerProtAdgmmaUniform2 = new JSpinner();
        jLabelProtAdgmmaTo = new JLabel();
        jSpinnerProtAdgmmaFixed = new JSpinner();
        jPanelProtPropinv = new JPanel();
        jRadioButtonProtPropinvUniform = new JRadioButton();
        jRadioButtonProtPropinvFixed = new JRadioButton();
        jSpinnerProtPropinvFixed = new JSpinner();
        jSpinnerProtPropinvUniform1 = new JSpinner();
        jLabelProtPropinvTo = new JLabel();
        jSpinnerProtPropinvUniform2 = new JSpinner();
        jCheckBoxProteinCovarionModel = new JCheckBox();
        jPanelMatrixRate = new JPanel();
        jRadioButtonFixedRModel = new JRadioButton();
        jComboBoxFixRateModels = new JComboBox();
        jRadioButtonVarRateModels = new JRadioButton();
        jComboBoxVarRateModels = new JComboBox();
        jRadioButtonModelJmpFixRate = new JRadioButton();
        jPanelDna = new JPanel();
        jPanelDnaAdgmmaParameter = new JPanel();
        jRadioButtonDnaAdgmmaUniform = new JRadioButton();
        jRadioButtonDnaAgmmaFixed = new JRadioButton();
        jSpinnerDnaAdgmmaUniform1 = new JSpinner();
        jSpinnerDnaAdgmmaUniform2 = new JSpinner();
        jLabelDnaAdgmmaTo = new JLabel();
        jSpinnerDnaAdgmmaFixed = new JSpinner();
        jPanelDnaPropinv = new JPanel();
        jRadioButtonDnaPropinvUniform = new JRadioButton();
        jRadioButtonDnaPropinvFixed = new JRadioButton();
        jSpinnerDnaPropinvFixed = new JSpinner();
        jSpinnerDnaPropinvUniform1 = new JSpinner();
        jLabelDnaPropinvTo = new JLabel();
        jSpinnerDnaPropinvUniform2 = new JSpinner();
        jLabelDnaGammaCategories = new JLabel();
        jSpinnerDnaGammaCategories = new JSpinner();
        jCheckBoxDnaCovarionModel = new JCheckBox();
        jLabelSubstitutionModel = new JLabel();
        jComboBoxSubstitutionModel = new JComboBox();
        jComboBoxDnaRateVariation = new JComboBox();
        jLabelDnaRateVariation = new JLabel();
        jLabelModelType = new JLabel();
        jComboBoxModelType = new JComboBox();
        jPanelCodon = new JPanel();
        jLabelGeneticCode = new JLabel();
        jComboBoxGeneticCode = new JComboBox();
        jLabelOmegaVariation = new JLabel();
        jComboBoxOmegaVariation = new JComboBox();
        jPanelMCMC = new JPanel();
        jLabelNumberCycles = new JLabel();
        jSpinnerNumberCycles = new JSpinner();
        jLabelNumberRuns = new JLabel();
        jSpinnerNumberRuns = new JSpinner();
        jPanelStopRule = new JPanel();
        jCheckBoxStopRule = new JCheckBox();
        jLabelCriticalValueConvergence = new JLabel();
        jSpinnerCriticalValueConverge = new JSpinner();
        jPanelDiagnostics = new JPanel();
        jLabelDiagnFrquence = new JLabel();
        jSpinnerDiagFrequence = new JSpinner();
        jLabelMinPartFrequence = new JLabel();
        jSpinnerMinPartFrequence = new JSpinner();
        jPanelChains = new JPanel();
        jLabelNumberChains = new JLabel();
        jSpinnerNumberChains = new JSpinner();
        jLabelSwapFrequence = new JLabel();
        jSpinnerNumberSwaps = new JSpinner();
        jLabelNumberSwaps = new JLabel();
        jSpinnerSwapFrequence = new JSpinner();
        jLabelSampleFrequence = new JLabel();
        jSpinnerSampleFrequence = new JSpinner();
        jButtonMcmcAdvancedSettings = new JButton();
        jPanelTree = new JPanel();
        jPanelStartingTree = new JPanel();
        jRadioButtonRandomTree = new JRadioButton();
        jRadioButtonUserTree = new JRadioButton();
        jPanelUserTree = new JPanel();
        jLabelNewickFormatTree = new JLabel();
        jTextFieldNewickTree = new JTextField();
        jLabelNumRandomPerturbations = new JLabel();
        jSpinnerNumRandomPerturbations = new JSpinner();
        jPanelTreeTopology = new JPanel();
        jRadioButtonNonClock = new JRadioButton();
        jRadioButtonClock = new JRadioButton();
        jComboBoxClock = new JComboBox();
        jLayeredPane1 = new JLayeredPane();
        jPanelSimpleClock = new JPanel();
        jLabelTreeTotalHeight = new JLabel();
        jSpinnerTreeheight = new JSpinner();
        jPanelCoalescence = new JPanel();
        jLabelTheta = new JLabel();
        jLabelPloidyLevel = new JLabel();
        jSpinnerTheta = new JSpinner();
        jComboBoxPloidyLevel = new JComboBox();
        jPanelBirthDeath = new JPanel();
        jLabelSpeciation = new JLabel();
        jLabelExtiction = new JLabel();
        jLabelSamplingProbability = new JLabel();
        jSpinnerSpeciation = new JSpinner();
        jSpinnerExtiction = new JSpinner();
        jSpinnerSamplingProbability = new JSpinner();
        jLabelBranchLengths = new JLabel();
        jSpinnerBranchLenghts = new JSpinner();
        jTabbedPaneSummarize = new JTabbedPane();
        jPanelSumParameter = new JPanel();
        jCheckBoxSumParameter = new JCheckBox();
        jPanelSump = new JPanel();
        jLabelSumpBurnin = new JLabel();
        jSpinnerSumpBurnin = new JSpinner();
        jPanelSumpOutput = new JPanel();
        jCheckBoxLikelihoodPlot = new JCheckBox();
        jCheckBoxMarginalModelLikelihood = new JCheckBox();
        jCheckBoxTable = new JCheckBox();
        jPanelSumTree = new JPanel();
        jCheckBoxSumTree = new JCheckBox();
        jPanelSumt = new JPanel();
        jLabelSumtBurnin = new JLabel();
        jSpinnerSumtBurnin = new JSpinner();
        jLabelMinProbabilityPartitions = new JLabel();
        jSpinnerMinProbabilityPartitions = new JSpinner();
        jCheckBoxCalcTreeProbabilites = new JCheckBox();
        jPanelConsensusTree = new JPanel();
        jRadioButtonHalfcompat = new JRadioButton();
        jRadioButtonAllcompat = new JRadioButton();
        jToggleButtonBatchPersonalizado = new JToggleButton();
        jButtonExecute = new JButton();
        jButtonTreeView = new JButton();
        jButtonRestoreDefault = new JButton();
        jButtonGoBack = new JButton();
        jButtonBegin = new JButton();

        FormListener formListener = new FormListener();

        AdvancedSettingsDialog.setTitle("MCMCMC - Advanced Settings");
        AdvancedSettingsDialog.setAlwaysOnTop(true);
        AdvancedSettingsDialog.setBackground(new Color(173, 200, 226));
        AdvancedSettingsDialog.setBounds(new Rectangle(0, 0, 0, 0));
        AdvancedSettingsDialog.setMinimumSize(new Dimension(533, 411));
        AdvancedSettingsDialog.setModal(true);
        AdvancedSettingsDialog.setResizable(false);
        AdvancedSettingsDialog.setLocationRelativeTo(this);

        jPanel1.setBackground(new Color(173, 200, 226));
        jPanel1.setMinimumSize(new Dimension(577, 383));
        jPanel1.setPreferredSize(new Dimension(577, 383));

        jLabelMcmcSeed.setFont(new Font("Arial", 1, 12));
        jLabelMcmcSeed.setText("Seed:");

        jLabelMcmcSwapSeed.setFont(new Font("Arial", 1, 12));
        jLabelMcmcSwapSeed.setText("Swap Seed:");

        jPanelMcmcReweight.setBackground(new Color(173, 200, 226));
        jPanelMcmcReweight.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Reweight"));
        jPanelMcmcReweight.setOpaque(false);

        jLabelMcmcDecrease.setFont(new Font("Arial", 1, 12));
        jLabelMcmcDecrease.setText("Decrease (%):");

        jLabelMcmcIncrease.setFont(new Font("Arial", 1, 12));
        jLabelMcmcIncrease.setText("Increase (%):");

        jLabelMcmcIncrement.setFont(new Font("Arial", 1, 12));
        jLabelMcmcIncrement.setText("Increment:");

        jSpinnerMcmcDecrease.setModel(new SpinnerNumberModel(0.0d, 0.0d, 100.0d, 1.0d));

        jSpinnerMcmcIncrease.setModel(new SpinnerNumberModel(0.0d, 0.0d, 100.0d, 1.0d));

        jSpinnerMcmcIncrement.setModel(new SpinnerNumberModel(1.0d, 0.01d, 1.0d, 0.01d));

        GroupLayout jPanelMcmcReweightLayout = new GroupLayout(jPanelMcmcReweight);
        jPanelMcmcReweight.setLayout(jPanelMcmcReweightLayout);
        jPanelMcmcReweightLayout.setHorizontalGroup(
            jPanelMcmcReweightLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMcmcReweightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelMcmcReweightLayout.createSequentialGroup()
                        .addComponent(jLabelMcmcDecrease)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMcmcDecrease, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelMcmcReweightLayout.createSequentialGroup()
                        .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jLabelMcmcIncrease)
                            .addComponent(jLabelMcmcIncrement))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(jSpinnerMcmcIncrement, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(jSpinnerMcmcIncrease, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))))
                .addGap(34, 34, 34))
        );
        jPanelMcmcReweightLayout.setVerticalGroup(
            jPanelMcmcReweightLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMcmcReweightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelMcmcDecrease)
                    .addComponent(jSpinnerMcmcDecrease, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerMcmcIncrease, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMcmcIncrease))
                .addGap(18, 18, 18)
                .addGroup(jPanelMcmcReweightLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelMcmcIncrement)
                    .addComponent(jSpinnerMcmcIncrement, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jSpinnerMcmcSeed.setModel(new SpinnerNumberModel(Long.valueOf(1116355510L), Long.valueOf(0L), null, Long.valueOf(100000L)));

        jSpinnerMcmcSwapSeed.setModel(new SpinnerNumberModel(Long.valueOf(1116355510L), Long.valueOf(0L), null, Long.valueOf(100000L)));

        jCheckBoxMcmcSaveBrlenght.setFont(new Font("Arial", 1, 12));
        jCheckBoxMcmcSaveBrlenght.setSelected(true);
        jCheckBoxMcmcSaveBrlenght.setText("Save Branch Lenght");

        jCheckBoxMcmcOrderTaxa.setFont(new Font("Arial", 1, 12));
        jCheckBoxMcmcOrderTaxa.setText("Order taxa");

        jPanelMcmcBurnin.setBackground(new Color(173, 200, 226));
        jPanelMcmcBurnin.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Burnin"));
        jPanelMcmcBurnin.setName("proportional"); // NOI18N
        jPanelMcmcBurnin.setOpaque(false);

        McmcBurnin.add(jRadioButtonMcmcProportionalBurnin);
        jRadioButtonMcmcProportionalBurnin.setFont(new Font("Arial", 1, 12));
        jRadioButtonMcmcProportionalBurnin.setSelected(true);
        jRadioButtonMcmcProportionalBurnin.setText("Proportional burning ");
        jRadioButtonMcmcProportionalBurnin.addItemListener(formListener);

        McmcBurnin.add(jRadioButtonMcmcSpecificBurnin);
        jRadioButtonMcmcSpecificBurnin.setFont(new Font("Arial", 1, 12));
        jRadioButtonMcmcSpecificBurnin.setText("Specific burning");
        jRadioButtonMcmcSpecificBurnin.addItemListener(formListener);

        jLabelMcmcBurninNum.setFont(new Font("Arial", 1, 12));
        jLabelMcmcBurninNum.setText("Burnin:");

        jLabelMcmcBurninFraq.setFont(new Font("Arial", 1, 12));
        jLabelMcmcBurninFraq.setText("Burnin Fraction:");

        jSpinnerMcmcBurninFraq.setModel(new SpinnerNumberModel(0.25d, 0.0d, 1.0d, 0.01d));

        jSpinnerMcmcBurninNum.setModel(new SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(100)));
        jSpinnerMcmcBurninNum.setEnabled(false);

        GroupLayout jPanelMcmcBurninLayout = new GroupLayout(jPanelMcmcBurnin);
        jPanelMcmcBurnin.setLayout(jPanelMcmcBurninLayout);
        jPanelMcmcBurninLayout.setHorizontalGroup(
            jPanelMcmcBurninLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMcmcBurninLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMcmcBurninLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelMcmcBurninLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabelMcmcBurninNum)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMcmcBurninNum, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(jPanelMcmcBurninLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabelMcmcBurninFraq)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMcmcBurninFraq, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRadioButtonMcmcProportionalBurnin)
                    .addComponent(jRadioButtonMcmcSpecificBurnin))
                .addContainerGap())
        );
        jPanelMcmcBurninLayout.setVerticalGroup(
            jPanelMcmcBurninLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMcmcBurninLayout.createSequentialGroup()
                .addComponent(jRadioButtonMcmcProportionalBurnin)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelMcmcBurninLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelMcmcBurninFraq)
                    .addComponent(jSpinnerMcmcBurninFraq, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jRadioButtonMcmcSpecificBurnin)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelMcmcBurninLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelMcmcBurninNum)
                    .addComponent(jSpinnerMcmcBurninNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        jButtonMcmcOk.setText("OK");
        jButtonMcmcOk.addActionListener(formListener);

        jButtonMcmcCancel.setText("Cancelar");
        jButtonMcmcCancel.setToolTipText("Retorna as configurações iniciais e fecha esta janela");
        jButtonMcmcCancel.addActionListener(formListener);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 509, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING, false)
                            .addGroup(Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelMcmcSeed)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerMcmcSeed))
                            .addGroup(Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelMcmcSwapSeed)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerMcmcSwapSeed, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jPanelMcmcReweight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(jCheckBoxMcmcSaveBrlenght)
                                .addComponent(jCheckBoxMcmcOrderTaxa)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(jButtonMcmcOk, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(ComponentPlacement.UNRELATED)
                            .addComponent(jButtonMcmcCancel, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanelMcmcBurnin, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jLabelMcmcSeed)
                        .addComponent(jSpinnerMcmcSeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxMcmcSaveBrlenght))
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jLabelMcmcSwapSeed)
                        .addComponent(jSpinnerMcmcSwapSeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxMcmcOrderTaxa))
                    .addGap(24, 24, 24)
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                        .addComponent(jPanelMcmcBurnin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanelMcmcReweight, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jButtonMcmcCancel, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMcmcOk, GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addContainerGap()))
        );

        GroupLayout AdvancedSettingsDialogLayout = new GroupLayout(AdvancedSettingsDialog.getContentPane());
        AdvancedSettingsDialog.getContentPane().setLayout(AdvancedSettingsDialogLayout);
        AdvancedSettingsDialogLayout.setHorizontalGroup(
            AdvancedSettingsDialogLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(AdvancedSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AdvancedSettingsDialogLayout.setVerticalGroup(
            AdvancedSettingsDialogLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(AdvancedSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 359, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jFileChooserSumParam.setDialogTitle("Savar como");
        jFileChooserSumParam.setDialogType(JFileChooser.SAVE_DIALOG);

        jFrameExecution.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        jFrameExecution.setTitle("MrBayes");
        jFrameExecution.setMinimumSize(new Dimension(493, 173));
        jFrameExecution.setResizable(false);
        jFrameExecution.addWindowListener(formListener);
        jFrameExecution.addComponentListener(formListener);
        jFrameExecution.setLocationRelativeTo(this);

        jButtonCancelExecution.setForeground(new Color(1, 1, 1));
        jButtonCancelExecution.setText("Cancelar");
        jButtonCancelExecution.addActionListener(formListener);

        jProgressBarExecution.setBackground(new Color(173, 200, 226));
        jProgressBarExecution.setForeground(new Color(1, 1, 1));
        jProgressBarExecution.setOpaque(false);
        jProgressBarExecution.setStringPainted(true);
        jProgressBarExecution.addChangeListener(formListener);

        jLabelOutputMrBayes1.setForeground(new Color(134, 134, 134));

        jLabelEstimateExe.setForeground(new Color(1, 1, 1));
        jLabelEstimateExe.setText("Iniciando execução...");

        jLabelOutputMrBayes2.setFont(new Font("Ubuntu", 1, 15));
        jLabelOutputMrBayes2.setForeground(new Color(1, 1, 1));

        GroupLayout jFrameExecutionLayout = new GroupLayout(jFrameExecution.getContentPane());
        jFrameExecution.getContentPane().setLayout(jFrameExecutionLayout);
        jFrameExecutionLayout.setHorizontalGroup(
            jFrameExecutionLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jFrameExecutionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameExecutionLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jFrameExecutionLayout.createSequentialGroup()
                        .addComponent(jLabelEstimateExe, GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(Alignment.TRAILING, jFrameExecutionLayout.createSequentialGroup()
                        .addGroup(jFrameExecutionLayout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(jLabelOutputMrBayes2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .addComponent(jLabelOutputMrBayes1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .addGroup(Alignment.LEADING, jFrameExecutionLayout.createSequentialGroup()
                                .addComponent(jProgressBarExecution, GroupLayout.PREFERRED_SIZE, 337, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCancelExecution, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))))
        );
        jFrameExecutionLayout.setVerticalGroup(
            jFrameExecutionLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jFrameExecutionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelEstimateExe)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jLabelOutputMrBayes1)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jLabelOutputMrBayes2)
                .addPreferredGap(ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jFrameExecutionLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jProgressBarExecution, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancelExecution, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        addComponentListener(formListener);

        jTabbedPaneConfig.setBackground(new Color(242, 241, 240));

        jTabbedPaneModel.setDoubleBuffered(true);

        jPanelProtein.setBackground(new Color(173, 200, 226));

        jLabelProtRateVariation.setBackground(jPanelProtein.getBackground());
        jLabelProtRateVariation.setFont(new Font("Arial", 1, 12));
        jLabelProtRateVariation.setText("Rate Variation:");

        jComboBoxProtRateVariation.setModel(new DefaultComboBoxModel(new String[] { "Equal", "Gamma", "Adgamma", "Propinv", "Invgamma" }));
        jComboBoxProtRateVariation.addItemListener(formListener);

        jLabelProtGammaCategories.setBackground(jPanelProtein.getBackground());
        jLabelProtGammaCategories.setFont(new Font("Arial", 1, 12));
        jLabelProtGammaCategories.setText("Gamma Categories:");

        jSpinnerProtGammaCategories.setModel(new SpinnerNumberModel(4, 2, 20, 1));
        jSpinnerProtGammaCategories.setEnabled(false);

        jPanelProtAdgmmaParameter.setBackground(jPanelProtein.getBackground());
        jPanelProtAdgmmaParameter.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Adgmma parameter prior"));
        jPanelProtAdgmmaParameter.setOpaque(false);

        jRadioButtonProtAdgammaUniform.setBackground(jPanelProtein.getBackground());
        proteinAdGamma.add(jRadioButtonProtAdgammaUniform);
        jRadioButtonProtAdgammaUniform.setFont(new Font("Arial", 1, 12));
        jRadioButtonProtAdgammaUniform.setText("uniform:");
        jRadioButtonProtAdgammaUniform.setEnabled(false);
        jRadioButtonProtAdgammaUniform.addItemListener(formListener);

        jRadioButtonProtAdgammaFixed.setBackground(jPanelProtein.getBackground());
        proteinAdGamma.add(jRadioButtonProtAdgammaFixed);
        jRadioButtonProtAdgammaFixed.setFont(new Font("Arial", 1, 12));
        jRadioButtonProtAdgammaFixed.setSelected(true);
        jRadioButtonProtAdgammaFixed.setText("fixed");
        jRadioButtonProtAdgammaFixed.setEnabled(false);
        jRadioButtonProtAdgammaFixed.addItemListener(formListener);

        jSpinnerProtAdgmmaUniform1.setEnabled(false);

        jSpinnerProtAdgmmaUniform2.setEnabled(false);

        jLabelProtAdgmmaTo.setBackground(jPanelProtein.getBackground());
        jLabelProtAdgmmaTo.setFont(new Font("Arial", 1, 12));
        jLabelProtAdgmmaTo.setText("to");

        jSpinnerProtAdgmmaFixed.setEnabled(false);

        GroupLayout jPanelProtAdgmmaParameterLayout = new GroupLayout(jPanelProtAdgmmaParameter);
        jPanelProtAdgmmaParameter.setLayout(jPanelProtAdgmmaParameterLayout);
        jPanelProtAdgmmaParameterLayout.setHorizontalGroup(
            jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProtAdgmmaParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonProtAdgammaUniform)
                    .addComponent(jRadioButtonProtAdgammaFixed))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jSpinnerProtAdgmmaFixed)
                    .addComponent(jSpinnerProtAdgmmaUniform1, GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jLabelProtAdgmmaTo)
                .addGap(18, 18, 18)
                .addComponent(jSpinnerProtAdgmmaUniform2, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanelProtAdgmmaParameterLayout.setVerticalGroup(
            jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProtAdgmmaParameterLayout.createSequentialGroup()
                .addGroup(jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonProtAdgammaUniform)
                    .addComponent(jSpinnerProtAdgmmaUniform1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProtAdgmmaTo)
                    .addComponent(jSpinnerProtAdgmmaUniform2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelProtAdgmmaParameterLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonProtAdgammaFixed)
                    .addComponent(jSpinnerProtAdgmmaFixed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelProtPropinv.setBackground(jPanelProtein.getBackground());
        jPanelProtPropinv.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Propinv prior"));
        jPanelProtPropinv.setOpaque(false);

        jRadioButtonProtPropinvUniform.setBackground(jPanelProtein.getBackground());
        proteinPropinv.add(jRadioButtonProtPropinvUniform);
        jRadioButtonProtPropinvUniform.setFont(new Font("Arial", 1, 12));
        jRadioButtonProtPropinvUniform.setText("uniform:");
        jRadioButtonProtPropinvUniform.setEnabled(false);
        jRadioButtonProtPropinvUniform.addItemListener(formListener);

        jRadioButtonProtPropinvFixed.setBackground(jPanelProtein.getBackground());
        proteinPropinv.add(jRadioButtonProtPropinvFixed);
        jRadioButtonProtPropinvFixed.setFont(new Font("Arial", 1, 12));
        jRadioButtonProtPropinvFixed.setSelected(true);
        jRadioButtonProtPropinvFixed.setText("fixed");
        jRadioButtonProtPropinvFixed.setEnabled(false);
        jRadioButtonProtPropinvFixed.addItemListener(formListener);

        jSpinnerProtPropinvFixed.setEnabled(false);

        jSpinnerProtPropinvUniform1.setEnabled(false);

        jLabelProtPropinvTo.setBackground(jPanelProtein.getBackground());
        jLabelProtPropinvTo.setFont(new Font("Arial", 1, 12));
        jLabelProtPropinvTo.setText("to");

        jSpinnerProtPropinvUniform2.setEnabled(false);

        GroupLayout jPanelProtPropinvLayout = new GroupLayout(jPanelProtPropinv);
        jPanelProtPropinv.setLayout(jPanelProtPropinvLayout);
        jPanelProtPropinvLayout.setHorizontalGroup(
            jPanelProtPropinvLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProtPropinvLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProtPropinvLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonProtPropinvUniform)
                    .addComponent(jRadioButtonProtPropinvFixed))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelProtPropinvLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jSpinnerProtPropinvFixed)
                    .addComponent(jSpinnerProtPropinvUniform1, GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jLabelProtPropinvTo)
                .addGap(18, 18, 18)
                .addComponent(jSpinnerProtPropinvUniform2, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelProtPropinvLayout.setVerticalGroup(
            jPanelProtPropinvLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProtPropinvLayout.createSequentialGroup()
                .addGroup(jPanelProtPropinvLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonProtPropinvUniform)
                    .addComponent(jSpinnerProtPropinvUniform1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerProtPropinvUniform2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProtPropinvTo))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelProtPropinvLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonProtPropinvFixed)
                    .addComponent(jSpinnerProtPropinvFixed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxProteinCovarionModel.setBackground(jPanelProtein.getBackground());
        jCheckBoxProteinCovarionModel.setFont(new Font("Arial", 1, 12));
        jCheckBoxProteinCovarionModel.setText("Covarion Model");

        jPanelMatrixRate.setBackground(jPanelProtein.getBackground());
        jPanelMatrixRate.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Matrix Rate"));
        jPanelMatrixRate.setName("fixed"); // NOI18N
        jPanelMatrixRate.setOpaque(false);

        jRadioButtonFixedRModel.setBackground(jPanelProtein.getBackground());
        MatrixRate.add(jRadioButtonFixedRModel);
        jRadioButtonFixedRModel.setFont(new Font("Arial", 1, 12));
        jRadioButtonFixedRModel.setSelected(true);
        jRadioButtonFixedRModel.setText("Fixed Rate Models:");
        jRadioButtonFixedRModel.addItemListener(formListener);

        jComboBoxFixRateModels.setModel(new DefaultComboBoxModel(new String[] { "Poisson", "Jones", "Dayhoff", "Mtrev", "Mtmam", "WAG", "Rtrev", "Cprev", "Vt", "Blosum62 " }));

        jRadioButtonVarRateModels.setBackground(jPanelProtein.getBackground());
        MatrixRate.add(jRadioButtonVarRateModels);
        jRadioButtonVarRateModels.setFont(new Font("Arial", 1, 12));
        jRadioButtonVarRateModels.setText("Variable Rate Models:");
        jRadioButtonVarRateModels.addItemListener(formListener);

        jComboBoxVarRateModels.setModel(new DefaultComboBoxModel(new String[] { "Equalin", "GTR" }));
        jComboBoxVarRateModels.setEnabled(false);

        jRadioButtonModelJmpFixRate.setBackground(jPanelProtein.getBackground());
        MatrixRate.add(jRadioButtonModelJmpFixRate);
        jRadioButtonModelJmpFixRate.setFont(new Font("Arial", 1, 12));
        jRadioButtonModelJmpFixRate.setText("Model Jumping Fixed-rate");
        jRadioButtonModelJmpFixRate.addItemListener(formListener);

        GroupLayout jPanelMatrixRateLayout = new GroupLayout(jPanelMatrixRate);
        jPanelMatrixRate.setLayout(jPanelMatrixRateLayout);
        jPanelMatrixRateLayout.setHorizontalGroup(
            jPanelMatrixRateLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMatrixRateLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelMatrixRateLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonModelJmpFixRate)
                    .addGroup(jPanelMatrixRateLayout.createSequentialGroup()
                        .addComponent(jRadioButtonFixedRModel)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFixRateModels, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonVarRateModels)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxVarRateModels, 0, 111, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelMatrixRateLayout.setVerticalGroup(
            jPanelMatrixRateLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMatrixRateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMatrixRateLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonFixedRModel)
                    .addComponent(jComboBoxFixRateModels, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonVarRateModels)
                    .addComponent(jComboBoxVarRateModels))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonModelJmpFixRate)
                .addGap(12, 12, 12))
        );

        GroupLayout jPanelProteinLayout = new GroupLayout(jPanelProtein);
        jPanelProtein.setLayout(jPanelProteinLayout);
        jPanelProteinLayout.setHorizontalGroup(
            jPanelProteinLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProteinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProteinLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelProteinLayout.createSequentialGroup()
                        .addComponent(jCheckBoxProteinCovarionModel)
                        .addContainerGap(454, Short.MAX_VALUE))
                    .addGroup(jPanelProteinLayout.createSequentialGroup()
                        .addComponent(jLabelProtRateVariation)
                        .addContainerGap(484, Short.MAX_VALUE))
                    .addGroup(jPanelProteinLayout.createSequentialGroup()
                        .addComponent(jPanelMatrixRate, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanelProteinLayout.createSequentialGroup()
                        .addGroup(jPanelProteinLayout.createParallelGroup(Alignment.TRAILING)
                            .addGroup(jPanelProteinLayout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(jComboBoxProtRateVariation, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelProtAdgmmaParameter, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanelProteinLayout.createParallelGroup(Alignment.LEADING)
                            .addGroup(jPanelProteinLayout.createSequentialGroup()
                                .addComponent(jLabelProtGammaCategories)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jSpinnerProtGammaCategories, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelProtPropinv, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))))
        );
        jPanelProteinLayout.setVerticalGroup(
            jPanelProteinLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelProteinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelMatrixRate, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxProteinCovarionModel)
                .addGap(18, 18, 18)
                .addGroup(jPanelProteinLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelProtRateVariation)
                    .addComponent(jComboBoxProtRateVariation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProtGammaCategories)
                    .addComponent(jSpinnerProtGammaCategories, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelProteinLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jPanelProtAdgmmaParameter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelProtPropinv, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPaneModel.addTab("Proteina", jPanelProtein);

        jPanelDna.setBackground(new Color(173, 200, 226));

        jPanelDnaAdgmmaParameter.setBackground(new Color(173, 200, 226));
        jPanelDnaAdgmmaParameter.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Adgmma parameter prior"));
        jPanelDnaAdgmmaParameter.setOpaque(false);

        jRadioButtonDnaAdgmmaUniform.setBackground(jPanelDna.getBackground());
        AdgmmaParamPrior.add(jRadioButtonDnaAdgmmaUniform);
        jRadioButtonDnaAdgmmaUniform.setFont(new Font("Arial", 1, 12));
        jRadioButtonDnaAdgmmaUniform.setText("uniform:");
        jRadioButtonDnaAdgmmaUniform.setEnabled(false);
        jRadioButtonDnaAdgmmaUniform.setFocusPainted(false);
        jRadioButtonDnaAdgmmaUniform.addItemListener(formListener);

        jRadioButtonDnaAgmmaFixed.setBackground(jPanelDna.getBackground());
        AdgmmaParamPrior.add(jRadioButtonDnaAgmmaFixed);
        jRadioButtonDnaAgmmaFixed.setFont(new Font("Arial", 1, 12));
        jRadioButtonDnaAgmmaFixed.setSelected(true);
        jRadioButtonDnaAgmmaFixed.setText("fixed");
        jRadioButtonDnaAgmmaFixed.setEnabled(false);
        jRadioButtonDnaAgmmaFixed.setFocusPainted(false);
        jRadioButtonDnaAgmmaFixed.addItemListener(formListener);

        jSpinnerDnaAdgmmaUniform1.setEnabled(false);

        jSpinnerDnaAdgmmaUniform2.setEnabled(false);

        jLabelDnaAdgmmaTo.setBackground(jPanelDna.getBackground());
        jLabelDnaAdgmmaTo.setFont(new Font("Arial", 1, 12));
        jLabelDnaAdgmmaTo.setText("to");

        jSpinnerDnaAdgmmaFixed.setEnabled(false);

        GroupLayout jPanelDnaAdgmmaParameterLayout = new GroupLayout(jPanelDnaAdgmmaParameter);
        jPanelDnaAdgmmaParameter.setLayout(jPanelDnaAdgmmaParameterLayout);
        jPanelDnaAdgmmaParameterLayout.setHorizontalGroup(
            jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaAdgmmaParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonDnaAdgmmaUniform)
                    .addComponent(jRadioButtonDnaAgmmaFixed))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jSpinnerDnaAdgmmaFixed, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(jSpinnerDnaAdgmmaUniform1, Alignment.TRAILING))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jLabelDnaAdgmmaTo, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jSpinnerDnaAdgmmaUniform2, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelDnaAdgmmaParameterLayout.setVerticalGroup(
            jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaAdgmmaParameterLayout.createSequentialGroup()
                .addGroup(jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonDnaAdgmmaUniform)
                    .addComponent(jSpinnerDnaAdgmmaUniform1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerDnaAdgmmaUniform2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDnaAdgmmaTo))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelDnaAdgmmaParameterLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonDnaAgmmaFixed)
                    .addComponent(jSpinnerDnaAdgmmaFixed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDnaPropinv.setBackground(new Color(173, 200, 226));
        jPanelDnaPropinv.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Propinv prior"));
        jPanelDnaPropinv.setOpaque(false);

        jRadioButtonDnaPropinvUniform.setBackground(jPanelDna.getBackground());
        PropinvPrior.add(jRadioButtonDnaPropinvUniform);
        jRadioButtonDnaPropinvUniform.setFont(new Font("Arial", 1, 12));
        jRadioButtonDnaPropinvUniform.setText("uniform:");
        jRadioButtonDnaPropinvUniform.setEnabled(false);
        jRadioButtonDnaPropinvUniform.setFocusPainted(false);
        jRadioButtonDnaPropinvUniform.addItemListener(formListener);

        jRadioButtonDnaPropinvFixed.setBackground(jPanelDna.getBackground());
        PropinvPrior.add(jRadioButtonDnaPropinvFixed);
        jRadioButtonDnaPropinvFixed.setFont(new Font("Arial", 1, 12));
        jRadioButtonDnaPropinvFixed.setSelected(true);
        jRadioButtonDnaPropinvFixed.setText("fixed");
        jRadioButtonDnaPropinvFixed.setEnabled(false);
        jRadioButtonDnaPropinvFixed.setFocusPainted(false);
        jRadioButtonDnaPropinvFixed.addItemListener(formListener);

        jSpinnerDnaPropinvFixed.setEnabled(false);

        jSpinnerDnaPropinvUniform1.setEnabled(false);

        jLabelDnaPropinvTo.setBackground(jPanelDna.getBackground());
        jLabelDnaPropinvTo.setFont(new Font("Arial", 1, 12));
        jLabelDnaPropinvTo.setText("to");

        jSpinnerDnaPropinvUniform2.setEnabled(false);

        GroupLayout jPanelDnaPropinvLayout = new GroupLayout(jPanelDnaPropinv);
        jPanelDnaPropinv.setLayout(jPanelDnaPropinvLayout);
        jPanelDnaPropinvLayout.setHorizontalGroup(
            jPanelDnaPropinvLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaPropinvLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDnaPropinvLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonDnaPropinvUniform)
                    .addComponent(jRadioButtonDnaPropinvFixed))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelDnaPropinvLayout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jSpinnerDnaPropinvFixed)
                    .addComponent(jSpinnerDnaPropinvUniform1, GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabelDnaPropinvTo)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jSpinnerDnaPropinvUniform2, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelDnaPropinvLayout.setVerticalGroup(
            jPanelDnaPropinvLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaPropinvLayout.createSequentialGroup()
                .addGroup(jPanelDnaPropinvLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonDnaPropinvUniform)
                    .addComponent(jSpinnerDnaPropinvUniform1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerDnaPropinvUniform2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDnaPropinvTo))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelDnaPropinvLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jRadioButtonDnaPropinvFixed)
                    .addComponent(jSpinnerDnaPropinvFixed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelDnaGammaCategories.setBackground(jPanelDna.getBackground());
        jLabelDnaGammaCategories.setFont(new Font("Arial", 1, 12));
        jLabelDnaGammaCategories.setText("Gamma Categories:");

        jSpinnerDnaGammaCategories.setModel(new SpinnerNumberModel(4, 2, 20, 1));
        jSpinnerDnaGammaCategories.setEnabled(false);

        jCheckBoxDnaCovarionModel.setFont(new Font("Arial", 1, 12));
        jCheckBoxDnaCovarionModel.setText("Covarion Model");
        jCheckBoxDnaCovarionModel.setFocusPainted(false);

        jLabelSubstitutionModel.setBackground(jPanelDna.getBackground());
        jLabelSubstitutionModel.setFont(new Font("Arial", 1, 12));
        jLabelSubstitutionModel.setText("Substitution Model");

        jComboBoxSubstitutionModel.setModel(new DefaultComboBoxModel(new String[] { "GTR", "SYM", "HKY", "K2P", "F81", "JC" }));

        jComboBoxDnaRateVariation.setModel(new DefaultComboBoxModel(new String[] { "Equal", "Gamma", "Adgamma", "Propinv", "Invgamma" }));
        jComboBoxDnaRateVariation.addItemListener(formListener);

        jLabelDnaRateVariation.setBackground(jPanelDna.getBackground());
        jLabelDnaRateVariation.setFont(new Font("Arial", 1, 12));
        jLabelDnaRateVariation.setText("Rate Variation:");

        jLabelModelType.setBackground(jPanelDna.getBackground());
        jLabelModelType.setFont(new Font("Arial", 1, 12));
        jLabelModelType.setText("Model Type:");

        jComboBoxModelType.setModel(new DefaultComboBoxModel(new String[] { "4by4", "Doublet", "Codon" }));
        jComboBoxModelType.addItemListener(formListener);

        jPanelCodon.setBackground(new Color(173, 200, 226));
        jPanelCodon.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Codon"));
        jPanelCodon.setOpaque(false);

        jLabelGeneticCode.setBackground(jPanelDnaPropinv.getBackground());
        jLabelGeneticCode.setFont(new Font("Arial", 1, 12));
        jLabelGeneticCode.setText("Genetic code:");

        jComboBoxGeneticCode.setModel(new DefaultComboBoxModel(new String[] { "Universal", "Vert. mit. DNA", "Mycoplasma", "Yeast", "Ciliates", "Meta. mit. DNA" }));
        jComboBoxGeneticCode.setEnabled(false);

        jLabelOmegaVariation.setBackground(jPanelDnaPropinv.getBackground());
        jLabelOmegaVariation.setFont(new Font("Arial", 1, 12));
        jLabelOmegaVariation.setText("Omega Variation:");

        jComboBoxOmegaVariation.setModel(new DefaultComboBoxModel(new String[] { "Equal", "Ny98", "M3" }));
        jComboBoxOmegaVariation.setEnabled(false);

        GroupLayout jPanelCodonLayout = new GroupLayout(jPanelCodon);
        jPanelCodon.setLayout(jPanelCodonLayout);
        jPanelCodonLayout.setHorizontalGroup(
            jPanelCodonLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelCodonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCodonLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelCodonLayout.createSequentialGroup()
                        .addComponent(jLabelGeneticCode)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jComboBoxGeneticCode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(Alignment.TRAILING, jPanelCodonLayout.createSequentialGroup()
                        .addComponent(jLabelOmegaVariation)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jComboBoxOmegaVariation, 0, 124, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelCodonLayout.setVerticalGroup(
            jPanelCodonLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelCodonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCodonLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelGeneticCode)
                    .addComponent(jComboBoxGeneticCode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCodonLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelOmegaVariation)
                    .addComponent(jComboBoxOmegaVariation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout jPanelDnaLayout = new GroupLayout(jPanelDna);
        jPanelDna.setLayout(jPanelDnaLayout);
        jPanelDnaLayout.setHorizontalGroup(
            jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelDnaLayout.createSequentialGroup()
                        .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jPanelDnaAdgmmaParameter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.TRAILING, false)
                                .addGroup(Alignment.LEADING, jPanelDnaLayout.createSequentialGroup()
                                    .addGap(38, 38, 38)
                                    .addComponent(jLabelModelType)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxModelType, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(Alignment.LEADING, jPanelDnaLayout.createSequentialGroup()
                                    .addComponent(jLabelSubstitutionModel)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxSubstitutionModel, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(Alignment.LEADING, jPanelDnaLayout.createSequentialGroup()
                                    .addComponent(jLabelDnaRateVariation)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxDnaRateVariation, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
                            .addGroup(jPanelDnaLayout.createSequentialGroup()
                                .addComponent(jLabelDnaGammaCategories)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jSpinnerDnaGammaCategories, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.TRAILING)
                                .addComponent(jPanelCodon, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jPanelDnaPropinv, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jCheckBoxDnaCovarionModel))
                .addGap(69, 69, 69))
        );
        jPanelDnaLayout.setVerticalGroup(
            jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDnaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(Alignment.TRAILING, jPanelDnaLayout.createSequentialGroup()
                        .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.TRAILING)
                            .addGroup(jPanelDnaLayout.createSequentialGroup()
                                .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jLabelSubstitutionModel)
                                    .addComponent(jComboBoxSubstitutionModel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addComponent(jCheckBoxDnaCovarionModel)
                                .addGap(18, 18, 18))
                            .addGroup(jPanelDnaLayout.createSequentialGroup()
                                .addComponent(jPanelCodon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(34, 34, 34)))
                        .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.TRAILING)
                            .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(jLabelDnaRateVariation)
                                .addComponent(jComboBoxDnaRateVariation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(jLabelDnaGammaCategories)
                                .addComponent(jSpinnerDnaGammaCategories, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(jPanelDnaAdgmmaParameter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelDnaPropinv, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelDnaLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jComboBoxModelType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelModelType)))
                .addContainerGap())
        );

        jTabbedPaneModel.addTab("DNA", jPanelDna);

        jTabbedPaneConfig.addTab("Modelo", null, jTabbedPaneModel, "Configuração do modelo evolutivo");

        jPanelMCMC.setBackground(new Color(173, 200, 226));

        jLabelNumberCycles.setBackground(jPanelMCMC.getBackground());
        jLabelNumberCycles.setFont(new Font("Arial", 1, 12));
        jLabelNumberCycles.setText("Number of cycles:");

        jSpinnerNumberCycles.setModel(new SpinnerNumberModel(Long.valueOf(1000000L), Long.valueOf(1L), null, Long.valueOf(1000L)));

        jLabelNumberRuns.setBackground(jPanelMCMC.getBackground());
        jLabelNumberRuns.setFont(new Font("Arial", 1, 12));
        jLabelNumberRuns.setText("Number of runs:");
        jLabelNumberRuns.setToolTipText("");

        jSpinnerNumberRuns.setModel(new SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerNumberRuns.addChangeListener(formListener);

        jPanelStopRule.setBackground(jPanelMCMC.getBackground());
        jPanelStopRule.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        jPanelStopRule.setOpaque(false);

        jCheckBoxStopRule.setBackground(jPanelMCMC.getBackground());
        jCheckBoxStopRule.setFont(new Font("Arial", 1, 12));
        jCheckBoxStopRule.setText("Stop rule:");
        jCheckBoxStopRule.addItemListener(formListener);

        jLabelCriticalValueConvergence.setBackground(jPanelMCMC.getBackground());
        jLabelCriticalValueConvergence.setFont(new Font("Arial", 1, 12));
        jLabelCriticalValueConvergence.setText("Critical value convergence:");

        jSpinnerCriticalValueConverge.setModel(new SpinnerNumberModel(Double.valueOf(0.01d), Double.valueOf(0.0d), null, Double.valueOf(0.01d)));
        jSpinnerCriticalValueConverge.setEnabled(false);

        GroupLayout jPanelStopRuleLayout = new GroupLayout(jPanelStopRule);
        jPanelStopRule.setLayout(jPanelStopRuleLayout);
        jPanelStopRuleLayout.setHorizontalGroup(
            jPanelStopRuleLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelStopRuleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStopRuleLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelStopRuleLayout.createSequentialGroup()
                        .addComponent(jLabelCriticalValueConvergence)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerCriticalValueConverge, GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                    .addComponent(jCheckBoxStopRule))
                .addContainerGap())
        );
        jPanelStopRuleLayout.setVerticalGroup(
            jPanelStopRuleLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, jPanelStopRuleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStopRuleLayout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jSpinnerCriticalValueConverge, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelStopRuleLayout.createSequentialGroup()
                        .addComponent(jCheckBoxStopRule)
                        .addPreferredGap(ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jLabelCriticalValueConvergence)))
                .addGap(33, 33, 33))
        );

        jPanelDiagnostics.setBackground(jPanelMCMC.getBackground());
        jPanelDiagnostics.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Diagnostics"));
        jPanelDiagnostics.setOpaque(false);

        jLabelDiagnFrquence.setBackground(jPanelMCMC.getBackground());
        jLabelDiagnFrquence.setFont(new Font("Arial", 1, 12));
        jLabelDiagnFrquence.setText("Diagn. Frequence:");

        jSpinnerDiagFrequence.setModel(new SpinnerNumberModel(Integer.valueOf(1000), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabelMinPartFrequence.setBackground(jPanelMCMC.getBackground());
        jLabelMinPartFrequence.setFont(new Font("Arial", 1, 12));
        jLabelMinPartFrequence.setText("Min. part. Frequence:");

        jSpinnerMinPartFrequence.setModel(new SpinnerNumberModel(Double.valueOf(0.1d), Double.valueOf(0.1d), null, Double.valueOf(0.1d)));

        GroupLayout jPanelDiagnosticsLayout = new GroupLayout(jPanelDiagnostics);
        jPanelDiagnostics.setLayout(jPanelDiagnosticsLayout);
        jPanelDiagnosticsLayout.setHorizontalGroup(
            jPanelDiagnosticsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDiagnosticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDiagnosticsLayout.createParallelGroup(Alignment.LEADING, false)
                    .addGroup(jPanelDiagnosticsLayout.createSequentialGroup()
                        .addComponent(jLabelDiagnFrquence)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerDiagFrequence, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDiagnosticsLayout.createSequentialGroup()
                        .addComponent(jLabelMinPartFrequence)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMinPartFrequence)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanelDiagnosticsLayout.setVerticalGroup(
            jPanelDiagnosticsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelDiagnosticsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDiagnosticsLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerDiagFrequence, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDiagnFrquence))
                .addGap(12, 12, 12)
                .addGroup(jPanelDiagnosticsLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerMinPartFrequence, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMinPartFrequence))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanelChains.setBackground(jPanelMCMC.getBackground());
        jPanelChains.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Chains"));
        jPanelChains.setOpaque(false);

        jLabelNumberChains.setBackground(jPanelMCMC.getBackground());
        jLabelNumberChains.setFont(new Font("Arial", 1, 12));
        jLabelNumberChains.setText("Number of chains:");
        jLabelNumberChains.setToolTipText("");

        jSpinnerNumberChains.setModel(new SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerNumberChains.addChangeListener(formListener);

        jLabelSwapFrequence.setBackground(jPanelMCMC.getBackground());
        jLabelSwapFrequence.setFont(new Font("Arial", 1, 12));
        jLabelSwapFrequence.setText("Swap frequence:");

        jSpinnerNumberSwaps.setModel(new SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabelNumberSwaps.setBackground(jPanelMCMC.getBackground());
        jLabelNumberSwaps.setFont(new Font("Arial", 1, 12));
        jLabelNumberSwaps.setText("Number of swaps:");

        jSpinnerSwapFrequence.setModel(new SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        GroupLayout jPanelChainsLayout = new GroupLayout(jPanelChains);
        jPanelChains.setLayout(jPanelChainsLayout);
        jPanelChainsLayout.setHorizontalGroup(
            jPanelChainsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelChainsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.TRAILING, false)
                        .addGroup(Alignment.LEADING, jPanelChainsLayout.createSequentialGroup()
                            .addComponent(jLabelNumberChains)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addComponent(jSpinnerNumberChains, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE))
                        .addGroup(Alignment.LEADING, jPanelChainsLayout.createSequentialGroup()
                            .addComponent(jLabelSwapFrequence)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.LEADING)
                                .addComponent(jSpinnerNumberSwaps, GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                .addComponent(jSpinnerSwapFrequence))))
                    .addComponent(jLabelNumberSwaps))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanelChainsLayout.setVerticalGroup(
            jPanelChainsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelChainsLayout.createSequentialGroup()
                .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelNumberChains)
                    .addComponent(jSpinnerNumberChains, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelSwapFrequence)
                    .addComponent(jSpinnerSwapFrequence, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(jPanelChainsLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelNumberSwaps)
                    .addComponent(jSpinnerNumberSwaps, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelSampleFrequence.setBackground(jPanelMCMC.getBackground());
        jLabelSampleFrequence.setFont(new Font("Arial", 1, 12));
        jLabelSampleFrequence.setText("Sample frequence:");

        jSpinnerSampleFrequence.setModel(new SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(50)));

        jButtonMcmcAdvancedSettings.setText("Advanced Settings");
        jButtonMcmcAdvancedSettings.addActionListener(formListener);

        GroupLayout jPanelMCMCLayout = new GroupLayout(jPanelMCMC);
        jPanelMCMC.setLayout(jPanelMCMCLayout);
        jPanelMCMCLayout.setHorizontalGroup(
            jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMCMCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jPanelChains, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelStopRule, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMCMCLayout.createSequentialGroup()
                        .addComponent(jLabelNumberCycles)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerNumberCycles, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelMCMCLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jPanelDiagnostics, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.TRAILING, false)
                                .addGroup(Alignment.LEADING, jPanelMCMCLayout.createSequentialGroup()
                                    .addComponent(jLabelNumberRuns)
                                    .addGap(27, 27, 27)
                                    .addComponent(jSpinnerNumberRuns))
                                .addGroup(Alignment.LEADING, jPanelMCMCLayout.createSequentialGroup()
                                    .addComponent(jLabelSampleFrequence)
                                    .addPreferredGap(ComponentPlacement.RELATED)
                                    .addComponent(jSpinnerSampleFrequence, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(Alignment.TRAILING, jPanelMCMCLayout.createSequentialGroup()
                        .addComponent(jButtonMcmcAdvancedSettings, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addContainerGap())
        );
        jPanelMCMCLayout.setVerticalGroup(
            jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelMCMCLayout.createSequentialGroup()
                .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelMCMCLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabelNumberRuns)
                            .addComponent(jSpinnerNumberRuns, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabelSampleFrequence)
                            .addComponent(jSpinnerSampleFrequence, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelMCMCLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabelNumberCycles)
                            .addComponent(jSpinnerNumberCycles, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addGroup(jPanelMCMCLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelMCMCLayout.createSequentialGroup()
                        .addComponent(jPanelDiagnostics, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButtonMcmcAdvancedSettings, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(Alignment.TRAILING, jPanelMCMCLayout.createSequentialGroup()
                        .addComponent(jPanelChains, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jPanelStopRule, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );

        jTabbedPaneConfig.addTab("MCMC", jPanelMCMC);

        jPanelTree.setBackground(new Color(173, 200, 226));

        jPanelStartingTree.setBackground(jPanelTree.getBackground());
        jPanelStartingTree.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(1, 1, 1)), "Starting Tree"));
        jPanelStartingTree.setName("random"); // NOI18N
        jPanelStartingTree.setOpaque(false);

        jRadioButtonRandomTree.setBackground(jPanelTree.getBackground());
        StartingTree.add(jRadioButtonRandomTree);
        jRadioButtonRandomTree.setFont(new Font("Arial", 1, 12));
        jRadioButtonRandomTree.setSelected(true);
        jRadioButtonRandomTree.setText("Random Tree");
        jRadioButtonRandomTree.addItemListener(formListener);

        jRadioButtonUserTree.setBackground(jPanelTree.getBackground());
        StartingTree.add(jRadioButtonUserTree);
        jRadioButtonUserTree.setFont(new Font("Arial", 1, 12));
        jRadioButtonUserTree.setText("User Tree");
        jRadioButtonUserTree.addChangeListener(formListener);
        jRadioButtonUserTree.addItemListener(formListener);

        jPanelUserTree.setBackground(jPanelTree.getBackground());
        jPanelUserTree.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "User Tree"));
        jPanelUserTree.setOpaque(false);

        jLabelNewickFormatTree.setFont(new Font("Arial", 1, 12));
        jLabelNewickFormatTree.setText("Newick format tree:");

        jTextFieldNewickTree.setText("Binary tree");
        jTextFieldNewickTree.setEnabled(false);

        jLabelNumRandomPerturbations.setFont(new Font("Arial", 1, 12));
        jLabelNumRandomPerturbations.setText("Num. of random perturbations:");

        jSpinnerNumRandomPerturbations.setEnabled(false);

        GroupLayout jPanelUserTreeLayout = new GroupLayout(jPanelUserTree);
        jPanelUserTree.setLayout(jPanelUserTreeLayout);
        jPanelUserTreeLayout.setHorizontalGroup(
            jPanelUserTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelUserTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUserTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelUserTreeLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jTextFieldNewickTree, GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                    .addComponent(jLabelNewickFormatTree)
                    .addGroup(jPanelUserTreeLayout.createSequentialGroup()
                        .addComponent(jLabelNumRandomPerturbations)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerNumRandomPerturbations)))
                .addContainerGap())
        );
        jPanelUserTreeLayout.setVerticalGroup(
            jPanelUserTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelUserTreeLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelNewickFormatTree)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jTextFieldNewickTree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(jPanelUserTreeLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelNumRandomPerturbations)
                    .addComponent(jSpinnerNumRandomPerturbations, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        GroupLayout jPanelStartingTreeLayout = new GroupLayout(jPanelStartingTree);
        jPanelStartingTree.setLayout(jPanelStartingTreeLayout);
        jPanelStartingTreeLayout.setHorizontalGroup(
            jPanelStartingTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelStartingTreeLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanelStartingTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonRandomTree)
                    .addComponent(jRadioButtonUserTree))
                .addPreferredGap(ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(jPanelUserTree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanelStartingTreeLayout.setVerticalGroup(
            jPanelStartingTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelStartingTreeLayout.createSequentialGroup()
                .addGroup(jPanelStartingTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelStartingTreeLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jRadioButtonRandomTree)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonUserTree))
                    .addComponent(jPanelUserTree, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelTreeTopology.setBackground(jPanelTree.getBackground());
        jPanelTreeTopology.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Tree Topology Prior"));
        jPanelTreeTopology.setName("non-clock"); // NOI18N
        jPanelTreeTopology.setOpaque(false);

        jRadioButtonNonClock.setBackground(jPanelTree.getBackground());
        TreeTopologyPrior.add(jRadioButtonNonClock);
        jRadioButtonNonClock.setFont(new Font("Arial", 1, 12));
        jRadioButtonNonClock.setSelected(true);
        jRadioButtonNonClock.setText("Non-clock:");
        jRadioButtonNonClock.addItemListener(formListener);

        jRadioButtonClock.setBackground(jPanelTree.getBackground());
        TreeTopologyPrior.add(jRadioButtonClock);
        jRadioButtonClock.setFont(new Font("Arial", 1, 12));
        jRadioButtonClock.setText("Clock:");
        jRadioButtonClock.addItemListener(formListener);

        jComboBoxClock.setModel(new DefaultComboBoxModel(new String[] { "Simple Clock", "Coalescence", "Birth-death" }));
        jComboBoxClock.setEnabled(false);
        jComboBoxClock.addItemListener(formListener);

        jLayeredPane1.setMinimumSize(new Dimension(270, 130));

        jPanelSimpleClock.setBackground(jPanelTree.getBackground());
        jPanelSimpleClock.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Simple Clock"));
        jPanelSimpleClock.setAutoscrolls(true);

        jLabelTreeTotalHeight.setFont(new Font("Arial", 1, 12));
        jLabelTreeTotalHeight.setText("Tree Total Height:");

        jSpinnerTreeheight.setEnabled(false);
        jSpinnerTreeheight.setOpaque(false);

        GroupLayout jPanelSimpleClockLayout = new GroupLayout(jPanelSimpleClock);
        jPanelSimpleClock.setLayout(jPanelSimpleClockLayout);
        jPanelSimpleClockLayout.setHorizontalGroup(
            jPanelSimpleClockLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSimpleClockLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTreeTotalHeight)
                .addGap(18, 18, 18)
                .addComponent(jSpinnerTreeheight, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanelSimpleClockLayout.setVerticalGroup(
            jPanelSimpleClockLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSimpleClockLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanelSimpleClockLayout.createParallelGroup(Alignment.CENTER)
                    .addComponent(jLabelTreeTotalHeight)
                    .addComponent(jSpinnerTreeheight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanelSimpleClock.setBounds(0, 0, 270, 130);
        jLayeredPane1.add(jPanelSimpleClock, JLayeredPane.DEFAULT_LAYER);

        jPanelCoalescence.setBackground(jPanelTree.getBackground());
        jPanelCoalescence.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Coalescence"));

        jLabelTheta.setFont(new Font("Arial", 1, 12));
        jLabelTheta.setText("Theta:");

        jLabelPloidyLevel.setFont(new Font("Arial", 1, 12));
        jLabelPloidyLevel.setText("Ploidy level:");

        jSpinnerTheta.setEnabled(false);
        jSpinnerTheta.setOpaque(false);

        jComboBoxPloidyLevel.setModel(new DefaultComboBoxModel(new String[] { "Haploid", "Diploid" }));
        jComboBoxPloidyLevel.setEnabled(false);
        jComboBoxPloidyLevel.setOpaque(false);

        GroupLayout jPanelCoalescenceLayout = new GroupLayout(jPanelCoalescence);
        jPanelCoalescence.setLayout(jPanelCoalescenceLayout);
        jPanelCoalescenceLayout.setHorizontalGroup(
            jPanelCoalescenceLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelCoalescenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCoalescenceLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelCoalescenceLayout.createSequentialGroup()
                        .addComponent(jLabelTheta)
                        .addGap(26, 26, 26)
                        .addComponent(jSpinnerTheta, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoalescenceLayout.createSequentialGroup()
                        .addComponent(jLabelPloidyLevel)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jComboBoxPloidyLevel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanelCoalescenceLayout.setVerticalGroup(
            jPanelCoalescenceLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelCoalescenceLayout.createSequentialGroup()
                .addGroup(jPanelCoalescenceLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelTheta)
                    .addComponent(jSpinnerTheta, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoalescenceLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelPloidyLevel)
                    .addComponent(jComboBoxPloidyLevel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanelCoalescence.setBounds(0, 0, 270, 130);
        jLayeredPane1.add(jPanelCoalescence, JLayeredPane.DEFAULT_LAYER);

        jPanelBirthDeath.setBackground(jPanelTree.getBackground());
        jPanelBirthDeath.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Birth-Death"));
        jPanelBirthDeath.setPreferredSize(new Dimension(270, 130));

        jLabelSpeciation.setFont(new Font("Arial", 1, 12));
        jLabelSpeciation.setText("Speciation:");

        jLabelExtiction.setFont(new Font("Arial", 1, 12));
        jLabelExtiction.setText("Extiction:");

        jLabelSamplingProbability.setFont(new Font("Arial", 1, 12));
        jLabelSamplingProbability.setText("Sampling probability:");

        jSpinnerSpeciation.setEnabled(false);
        jSpinnerSpeciation.setOpaque(false);

        jSpinnerExtiction.setEnabled(false);
        jSpinnerExtiction.setOpaque(false);

        jSpinnerSamplingProbability.setEnabled(false);
        jSpinnerSamplingProbability.setOpaque(false);

        GroupLayout jPanelBirthDeathLayout = new GroupLayout(jPanelBirthDeath);
        jPanelBirthDeath.setLayout(jPanelBirthDeathLayout);
        jPanelBirthDeathLayout.setHorizontalGroup(
            jPanelBirthDeathLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelBirthDeathLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBirthDeathLayout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jLabelSpeciation)
                    .addComponent(jLabelExtiction)
                    .addComponent(jLabelSamplingProbability))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelBirthDeathLayout.createParallelGroup(Alignment.TRAILING, false)
                    .addComponent(jSpinnerSamplingProbability, Alignment.LEADING)
                    .addComponent(jSpinnerSpeciation, Alignment.LEADING)
                    .addComponent(jSpinnerExtiction, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanelBirthDeathLayout.setVerticalGroup(
            jPanelBirthDeathLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelBirthDeathLayout.createSequentialGroup()
                .addGroup(jPanelBirthDeathLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerSpeciation, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSpeciation))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelBirthDeathLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelExtiction)
                    .addComponent(jSpinnerExtiction, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelBirthDeathLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerSamplingProbability, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSamplingProbability))
                .addContainerGap())
        );

        jPanelBirthDeath.setBounds(0, 0, 270, 130);
        jLayeredPane1.add(jPanelBirthDeath, JLayeredPane.DEFAULT_LAYER);

        jLabelBranchLengths.setBackground(jPanelTree.getBackground());
        jLabelBranchLengths.setFont(new Font("Arial", 1, 12));
        jLabelBranchLengths.setText("Branch lengths:");
        jLabelBranchLengths.setOpaque(true);

        GroupLayout jPanelTreeTopologyLayout = new GroupLayout(jPanelTreeTopology);
        jPanelTreeTopology.setLayout(jPanelTreeTopologyLayout);
        jPanelTreeTopologyLayout.setHorizontalGroup(
            jPanelTreeTopologyLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelTreeTopologyLayout.createSequentialGroup()
                .addGroup(jPanelTreeTopologyLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelTreeTopologyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelTreeTopologyLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jRadioButtonNonClock)
                            .addComponent(jRadioButtonClock)))
                    .addGroup(jPanelTreeTopologyLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabelBranchLengths)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerBranchLenghts, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelTreeTopologyLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jComboBoxClock, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56)
                .addComponent(jLayeredPane1, GroupLayout.PREFERRED_SIZE, 278, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTreeTopologyLayout.setVerticalGroup(
            jPanelTreeTopologyLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelTreeTopologyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonNonClock)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelTreeTopologyLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabelBranchLengths)
                    .addComponent(jSpinnerBranchLenghts, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jRadioButtonClock)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxClock, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
            .addComponent(jLayeredPane1, GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        GroupLayout jPanelTreeLayout = new GroupLayout(jPanelTree);
        jPanelTree.setLayout(jPanelTreeLayout);
        jPanelTreeLayout.setHorizontalGroup(
            jPanelTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jPanelTreeTopology, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelStartingTree, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelTreeLayout.setVerticalGroup(
            jPanelTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelStartingTree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelTreeTopology, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneConfig.addTab("Árvore", jPanelTree);

        jTabbedPaneSummarize.setBackground(new Color(173, 200, 226));

        jPanelSumParameter.setBackground(new Color(173, 200, 226));

        jCheckBoxSumParameter.setBackground(jPanelSumParameter.getBackground());
        jCheckBoxSumParameter.setText("Sumarizar amostras de parametros");
        jCheckBoxSumParameter.addItemListener(formListener);
        jCheckBoxSumParameter.addActionListener(formListener);

        jPanelSump.setBackground(jPanelSumParameter.getBackground());
        jPanelSump.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(1, 1, 1)), "Sump", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12), new Color(1, 1, 1))); // NOI18N
        jPanelSump.setOpaque(false);

        jLabelSumpBurnin.setFont(new Font("Arial", 1, 12));
        jLabelSumpBurnin.setText("Burnin:");

        jSpinnerSumpBurnin.setEnabled(false);

        jPanelSumpOutput.setBackground(new Color(173, 200, 226));
        jPanelSumpOutput.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(80, 80, 80)), "Output", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12))); // NOI18N

        jCheckBoxLikelihoodPlot.setBackground(jPanelSumParameter.getBackground());
        jCheckBoxLikelihoodPlot.setFont(new Font("Arial", 1, 12));
        jCheckBoxLikelihoodPlot.setSelected(true);
        jCheckBoxLikelihoodPlot.setText("Likelihood Plot");
        jCheckBoxLikelihoodPlot.setEnabled(false);

        jCheckBoxMarginalModelLikelihood.setBackground(jPanelSumParameter.getBackground());
        jCheckBoxMarginalModelLikelihood.setFont(new Font("Arial", 1, 12));
        jCheckBoxMarginalModelLikelihood.setSelected(true);
        jCheckBoxMarginalModelLikelihood.setText("Marginal Model Likelihood");
        jCheckBoxMarginalModelLikelihood.setEnabled(false);

        jCheckBoxTable.setBackground(jPanelSumParameter.getBackground());
        jCheckBoxTable.setFont(new Font("Arial", 1, 12));
        jCheckBoxTable.setSelected(true);
        jCheckBoxTable.setText("Table");
        jCheckBoxTable.setEnabled(false);

        GroupLayout jPanelSumpOutputLayout = new GroupLayout(jPanelSumpOutput);
        jPanelSumpOutput.setLayout(jPanelSumpOutputLayout);
        jPanelSumpOutputLayout.setHorizontalGroup(
            jPanelSumpOutputLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumpOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSumpOutputLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jCheckBoxLikelihoodPlot)
                    .addComponent(jCheckBoxMarginalModelLikelihood)
                    .addComponent(jCheckBoxTable))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanelSumpOutputLayout.setVerticalGroup(
            jPanelSumpOutputLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumpOutputLayout.createSequentialGroup()
                .addComponent(jCheckBoxLikelihoodPlot)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jCheckBoxMarginalModelLikelihood)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTable)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        GroupLayout jPanelSumpLayout = new GroupLayout(jPanelSump);
        jPanelSump.setLayout(jPanelSumpLayout);
        jPanelSumpLayout.setHorizontalGroup(
            jPanelSumpLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumpLayout.createSequentialGroup()
                .addGroup(jPanelSumpLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelSumpLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelSumpBurnin)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinnerSumpBurnin, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelSumpLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jPanelSumpOutput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        jPanelSumpLayout.setVerticalGroup(
            jPanelSumpLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumpLayout.createSequentialGroup()
                .addGroup(jPanelSumpLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerSumpBurnin, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSumpBurnin))
                .addPreferredGap(ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanelSumpOutput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        GroupLayout jPanelSumParameterLayout = new GroupLayout(jPanelSumParameter);
        jPanelSumParameter.setLayout(jPanelSumParameterLayout);
        jPanelSumParameterLayout.setHorizontalGroup(
            jPanelSumParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSumParameterLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jCheckBoxSumParameter)
                    .addComponent(jPanelSump, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelSumParameterLayout.setVerticalGroup(
            jPanelSumParameterLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxSumParameter)
                .addGap(18, 18, 18)
                .addComponent(jPanelSump, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPaneSummarize.addTab("Parametros", jPanelSumParameter);

        jPanelSumTree.setBackground(new Color(173, 200, 226));

        jCheckBoxSumTree.setBackground(jLabelSampleFrequence.getBackground());
        jCheckBoxSumTree.setText("Sumarizar amostras de arvore");
        jCheckBoxSumTree.addItemListener(formListener);
        jCheckBoxSumTree.addActionListener(formListener);

        jPanelSumt.setBackground(jLabelSampleFrequence.getBackground());
        jPanelSumt.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(1, 1, 1)), "Sumt", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12), new Color(1, 1, 1))); // NOI18N
        jPanelSumt.setOpaque(false);

        jLabelSumtBurnin.setFont(new Font("Arial", 1, 12));
        jLabelSumtBurnin.setText("Burnin:");

        jSpinnerSumtBurnin.setEnabled(false);

        jLabelMinProbabilityPartitions.setFont(new Font("Arial", 1, 12));
        jLabelMinProbabilityPartitions.setText("Min. Probability partitions:");
        jLabelMinProbabilityPartitions.setToolTipText("Minimun probability of partitions to display");

        jSpinnerMinProbabilityPartitions.setModel(new SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        jSpinnerMinProbabilityPartitions.setEnabled(false);

        jCheckBoxCalcTreeProbabilites.setBackground(jLabelSampleFrequence.getBackground());
        jCheckBoxCalcTreeProbabilites.setFont(new Font("Arial", 1, 12));
        jCheckBoxCalcTreeProbabilites.setSelected(true);
        jCheckBoxCalcTreeProbabilites.setText("Calc. Tree Probabilites");
        jCheckBoxCalcTreeProbabilites.setEnabled(false);

        jPanelConsensusTree.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "Consensus tree", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12))); // NOI18N
        jPanelConsensusTree.setName("halfcompat"); // NOI18N
        jPanelConsensusTree.setOpaque(false);

        jRadioButtonHalfcompat.setBackground(jLabelSampleFrequence.getBackground());
        ConsensusTree.add(jRadioButtonHalfcompat);
        jRadioButtonHalfcompat.setFont(new Font("Arial", 1, 12));
        jRadioButtonHalfcompat.setSelected(true);
        jRadioButtonHalfcompat.setText("Halfcompat");
        jRadioButtonHalfcompat.setEnabled(false);
        jRadioButtonHalfcompat.addItemListener(formListener);

        jRadioButtonAllcompat.setBackground(jLabelSampleFrequence.getBackground());
        ConsensusTree.add(jRadioButtonAllcompat);
        jRadioButtonAllcompat.setFont(new Font("Arial", 1, 12));
        jRadioButtonAllcompat.setText("Allcompat");
        jRadioButtonAllcompat.setEnabled(false);
        jRadioButtonAllcompat.addItemListener(formListener);

        GroupLayout jPanelConsensusTreeLayout = new GroupLayout(jPanelConsensusTree);
        jPanelConsensusTree.setLayout(jPanelConsensusTreeLayout);
        jPanelConsensusTreeLayout.setHorizontalGroup(
            jPanelConsensusTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelConsensusTreeLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanelConsensusTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jRadioButtonAllcompat)
                    .addComponent(jRadioButtonHalfcompat))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanelConsensusTreeLayout.setVerticalGroup(
            jPanelConsensusTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelConsensusTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonHalfcompat)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonAllcompat)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        GroupLayout jPanelSumtLayout = new GroupLayout(jPanelSumt);
        jPanelSumt.setLayout(jPanelSumtLayout);
        jPanelSumtLayout.setHorizontalGroup(
            jPanelSumtLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSumtLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelSumtLayout.createSequentialGroup()
                        .addComponent(jLabelSumtBurnin)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinnerSumtBurnin, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelSumtLayout.createSequentialGroup()
                        .addComponent(jLabelMinProbabilityPartitions)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSpinnerMinProbabilityPartitions, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxCalcTreeProbabilites))
                .addPreferredGap(ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(jPanelConsensusTree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanelSumtLayout.setVerticalGroup(
            jPanelSumtLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumtLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelSumtLayout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(Alignment.LEADING, jPanelSumtLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanelSumtLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jSpinnerSumtBurnin, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSumtBurnin))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelSumtLayout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabelMinProbabilityPartitions)
                            .addComponent(jSpinnerMinProbabilityPartitions, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxCalcTreeProbabilites))
                    .addComponent(jPanelConsensusTree, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        GroupLayout jPanelSumTreeLayout = new GroupLayout(jPanelSumTree);
        jPanelSumTree.setLayout(jPanelSumTreeLayout);
        jPanelSumTreeLayout.setHorizontalGroup(
            jPanelSumTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSumTreeLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jCheckBoxSumTree)
                    .addComponent(jPanelSumt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSumTreeLayout.setVerticalGroup(
            jPanelSumTreeLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelSumTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxSumTree)
                .addGap(18, 18, 18)
                .addComponent(jPanelSumt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPaneSummarize.addTab("Arvores", jPanelSumTree);

        jTabbedPaneConfig.addTab("Sumarizar", jTabbedPaneSummarize);

        jToggleButtonBatchPersonalizado.setText("Usar bloco de comando personalizado");
        jToggleButtonBatchPersonalizado.setEnabled(false);

        jButtonExecute.setText("Executar");
        jButtonExecute.setPreferredSize(new Dimension(81, 35));
        jButtonExecute.addActionListener(formListener);

        jButtonTreeView.setIcon(new ImageIcon(getClass().getResource("/br/uesc/computacao/igrafu/apresentacao/resources/figtree25.png"))); // NOI18N
        jButtonTreeView.setText("Visualizar");
        jButtonTreeView.setEnabled(false);
        jButtonTreeView.setPreferredSize(new Dimension(81, 35));
        jButtonTreeView.addActionListener(formListener);

        jButtonRestoreDefault.setText("Restaurar padrão");
        jButtonRestoreDefault.setPreferredSize(new Dimension(81, 35));
        jButtonRestoreDefault.addActionListener(formListener);

        jButtonGoBack.setIcon(new ImageIcon(getClass().getResource("/br/uesc/computacao/igrafu/apresentacao/resources/voltar.png"))); // NOI18N
        jButtonGoBack.setText("Voltar");
        jButtonGoBack.setPreferredSize(new Dimension(81, 35));
        jButtonGoBack.addActionListener(formListener);

        jButtonBegin.setIcon(new ImageIcon(getClass().getResource("/br/uesc/computacao/igrafu/apresentacao/resources/home.png"))); // NOI18N
        jButtonBegin.setText("Inicio");
        jButtonBegin.setPreferredSize(new Dimension(81, 35));
        jButtonBegin.addActionListener(formListener);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jTabbedPaneConfig, GroupLayout.PREFERRED_SIZE, 627, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonBatchPersonalizado))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(Alignment.LEADING)
                        .addComponent(jButtonBegin, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRestoreDefault, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonExecute, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonTreeView, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonGoBack, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBegin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButtonGoBack, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(jButtonRestoreDefault, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExecute, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonTreeView, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPaneConfig, GroupLayout.PREFERRED_SIZE, 407, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jToggleButtonBatchPersonalizado)
                .addContainerGap())
        );
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener, ComponentListener, ItemListener, WindowListener, ChangeListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == jButtonMcmcAdvancedSettings) {
                MrBayesUI.this.jButtonMcmcAdvancedSettingsActionPerformed(evt);
                MrBayesUI.this.jButtonMcmcAdvancedSettingsActionPerformed1(evt);
            }
            else if (evt.getSource() == jCheckBoxSumParameter) {
                MrBayesUI.this.jCheckBoxSumParameterActionPerformed(evt);
            }
            else if (evt.getSource() == jCheckBoxSumTree) {
                MrBayesUI.this.jCheckBoxSumTreeActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonExecute) {
                MrBayesUI.this.jButtonExecuteActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonTreeView) {
                MrBayesUI.this.jButtonTreeViewActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonRestoreDefault) {
                MrBayesUI.this.jButtonRestoreDefaultActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonGoBack) {
                MrBayesUI.this.jButtonGoBackActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonBegin) {
                MrBayesUI.this.jButtonBeginActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonMcmcOk) {
                MrBayesUI.this.jButtonMcmcOkActionPerformed(evt);
                MrBayesUI.this.jButtonMcmcOkActionPerformed1(evt);
            }
            else if (evt.getSource() == jButtonMcmcCancel) {
                MrBayesUI.this.jButtonMcmcCancelActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonCancelExecution) {
                MrBayesUI.this.jButtonCancelExecutionActionPerformed(evt);
            }
        }

        public void componentHidden(ComponentEvent evt) {
        }

        public void componentMoved(ComponentEvent evt) {
        }

        public void componentResized(ComponentEvent evt) {
        }

        public void componentShown(ComponentEvent evt) {
            if (evt.getSource() == MrBayesUI.this) {
                MrBayesUI.this.formComponentShown(evt);
            }
            else if (evt.getSource() == jFrameExecution) {
                MrBayesUI.this.jFrameExecutionComponentShown(evt);
            }
        }

        public void itemStateChanged(ItemEvent evt) {
            if (evt.getSource() == jComboBoxProtRateVariation) {
                MrBayesUI.this.jComboBoxProtRateVariationItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonProtAdgammaUniform) {
                MrBayesUI.this.jRadioButtonProtAdgammaUniformItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonProtAdgammaFixed) {
                MrBayesUI.this.jRadioButtonProtAdgammaFixedItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonProtPropinvUniform) {
                MrBayesUI.this.jRadioButtonProtPropinvUniformItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonProtPropinvFixed) {
                MrBayesUI.this.jRadioButtonProtPropinvFixedItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonFixedRModel) {
                MrBayesUI.this.jRadioButtonFixedRModelItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonVarRateModels) {
                MrBayesUI.this.jRadioButtonVarRateModelsItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonModelJmpFixRate) {
                MrBayesUI.this.jRadioButtonModelJmpFixRateItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonDnaAdgmmaUniform) {
                MrBayesUI.this.jRadioButtonDnaAdgmmaUniformItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonDnaAgmmaFixed) {
                MrBayesUI.this.jRadioButtonDnaAgmmaFixedItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonDnaPropinvUniform) {
                MrBayesUI.this.jRadioButtonDnaPropinvUniformItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonDnaPropinvFixed) {
                MrBayesUI.this.jRadioButtonDnaPropinvFixedItemStateChanged(evt);
            }
            else if (evt.getSource() == jComboBoxDnaRateVariation) {
                MrBayesUI.this.jComboBoxDnaRateVariationItemStateChanged(evt);
            }
            else if (evt.getSource() == jComboBoxModelType) {
                MrBayesUI.this.jComboBoxModelTypeItemStateChanged(evt);
            }
            else if (evt.getSource() == jCheckBoxStopRule) {
                MrBayesUI.this.jCheckBoxStopRuleItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonRandomTree) {
                MrBayesUI.this.jRadioButtonRandomTreeItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonUserTree) {
                MrBayesUI.this.jRadioButtonUserTreeItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonNonClock) {
                MrBayesUI.this.jRadioButtonNonClockItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonClock) {
                MrBayesUI.this.jRadioButtonClockItemStateChanged(evt);
            }
            else if (evt.getSource() == jComboBoxClock) {
                MrBayesUI.this.jComboBoxClockItemStateChanged(evt);
                MrBayesUI.this.jComboBoxClockItemStateChanged1(evt);
            }
            else if (evt.getSource() == jCheckBoxSumParameter) {
                MrBayesUI.this.jCheckBoxSumParameterItemStateChanged(evt);
            }
            else if (evt.getSource() == jCheckBoxSumTree) {
                MrBayesUI.this.jCheckBoxSumTreeItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonHalfcompat) {
                MrBayesUI.this.jRadioButtonHalfcompatItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonAllcompat) {
                MrBayesUI.this.jRadioButtonAllcompatItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonMcmcProportionalBurnin) {
                MrBayesUI.this.jRadioButtonMcmcProportionalBurninItemStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonMcmcSpecificBurnin) {
                MrBayesUI.this.jRadioButtonMcmcSpecificBurninItemStateChanged(evt);
            }
        }

        public void windowActivated(WindowEvent evt) {
        }

        public void windowClosed(WindowEvent evt) {
        }

        public void windowClosing(WindowEvent evt) {
            if (evt.getSource() == jFrameExecution) {
                MrBayesUI.this.jFrameExecutionWindowClosing(evt);
            }
        }

        public void windowDeactivated(WindowEvent evt) {
        }

        public void windowDeiconified(WindowEvent evt) {
        }

        public void windowIconified(WindowEvent evt) {
        }

        public void windowOpened(WindowEvent evt) {
        }

        public void stateChanged(ChangeEvent evt) {
            if (evt.getSource() == jSpinnerNumberRuns) {
                MrBayesUI.this.jSpinnerNumberRunsStateChanged(evt);
            }
            else if (evt.getSource() == jSpinnerNumberChains) {
                MrBayesUI.this.jSpinnerNumberChainsStateChanged(evt);
            }
            else if (evt.getSource() == jRadioButtonUserTree) {
                MrBayesUI.this.jRadioButtonUserTreeStateChanged(evt);
            }
            else if (evt.getSource() == jProgressBarExecution) {
                MrBayesUI.this.jProgressBarExecutionStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonUserTreeStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonUserTreeStateChanged
      
}//GEN-LAST:event_jRadioButtonUserTreeStateChanged

    private void jComboBoxClockItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxClockItemStateChanged

}//GEN-LAST:event_jComboBoxClockItemStateChanged

    private void jComboBoxClockItemStateChanged1(ItemEvent evt) {//GEN-FIRST:event_jComboBoxClockItemStateChanged1
        if(jComboBoxClock.getSelectedIndex() == 0){
            this.jLayeredPane1.moveToFront(this.jPanelSimpleClock);
        }
        if(jComboBoxClock.getSelectedIndex() == 1){
            this.jLayeredPane1.moveToFront(this.jPanelCoalescence);
        }
        if(jComboBoxClock.getSelectedIndex() == 2){
            this.jLayeredPane1.moveToFront(this.jPanelBirthDeath);
        }
    }//GEN-LAST:event_jComboBoxClockItemStateChanged1

    private void jCheckBoxSumParameterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSumParameterActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBoxSumParameterActionPerformed

    private void jCheckBoxSumTreeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSumTreeActionPerformed
        
}//GEN-LAST:event_jCheckBoxSumTreeActionPerformed

    private void jButtonGoBackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonGoBackActionPerformed
        java.awt.CardLayout cl = (java.awt.CardLayout)(frame.getContentPane().getLayout());
        cl.previous(frame.getContentPane());
}//GEN-LAST:event_jButtonGoBackActionPerformed

    private void jButtonMcmcAdvancedSettingsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonMcmcAdvancedSettingsActionPerformed
        this.AdvancedSettingsDialog.setVisible(true);
    }//GEN-LAST:event_jButtonMcmcAdvancedSettingsActionPerformed

    private void jComboBoxModelTypeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxModelTypeItemStateChanged
        switch(jComboBoxModelType.getSelectedIndex()){
            case 0: //4 by 4
                jComboBoxGeneticCode.setEnabled(false);
                jComboBoxOmegaVariation.setEnabled(false);
                jComboBoxModelType.setName("4by4");
                break;
            case 1: // Doublet
                jComboBoxGeneticCode.setEnabled(false);
                jComboBoxOmegaVariation.setEnabled(false);
                jComboBoxModelType.setName("doublet");
                break;
            case 2: //Codon
                jComboBoxGeneticCode.setEnabled(true);
                jComboBoxOmegaVariation.setEnabled(true);
                jComboBoxModelType.setName("codon");
                break;
            default:
                System.out.println("Erro inesperado - Model Type");
                break;
        }

    }//GEN-LAST:event_jComboBoxModelTypeItemStateChanged

    private void jComboBoxDnaRateVariationItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxDnaRateVariationItemStateChanged
        switch(jComboBoxDnaRateVariation.getSelectedIndex()){
            case 0: //Equal
                //Adgmma parameter prior
                jRadioButtonDnaAdgmmaUniform.setEnabled(false);
                jRadioButtonDnaAgmmaFixed.setEnabled(false);
                jSpinnerDnaAdgmmaUniform1.setEnabled(false);
                jSpinnerDnaAdgmmaUniform2.setEnabled(false);
                jSpinnerDnaAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonDnaPropinvUniform.setEnabled(false);
                jRadioButtonDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvUniform1.setEnabled(false);
                jSpinnerDnaPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerDnaGammaCategories.setEnabled(false);
                break;

            case 1: //Gamma
                //Adgmma parameter prior
                jRadioButtonDnaAdgmmaUniform.setEnabled(false);
                jRadioButtonDnaAgmmaFixed.setEnabled(false);
                jSpinnerDnaAdgmmaUniform1.setEnabled(false);
                jSpinnerDnaAdgmmaUniform2.setEnabled(false);
                jSpinnerDnaAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonDnaPropinvUniform.setEnabled(false);
                jRadioButtonDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvUniform1.setEnabled(false);
                jSpinnerDnaPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerDnaGammaCategories.setEnabled(true);
                break;

            case 2: //AdGamma
                //Adgmma parameter prior
                jRadioButtonDnaAdgmmaUniform.setEnabled(true);
                jRadioButtonDnaAgmmaFixed.setEnabled(true);
                if(jRadioButtonDnaAdgmmaUniform.isSelected()){
                    jSpinnerDnaAdgmmaUniform1.setEnabled(true);
                    jSpinnerDnaAdgmmaUniform2.setEnabled(true);
                    jSpinnerDnaAdgmmaFixed.setEnabled(false);
                }
                else if(jRadioButtonDnaAgmmaFixed.isSelected()){
                    jSpinnerDnaAdgmmaUniform1.setEnabled(false);
                    jSpinnerDnaAdgmmaUniform2.setEnabled(false);
                    jSpinnerDnaAdgmmaFixed.setEnabled(true);
                }

                //Propinv prior
                jRadioButtonDnaPropinvUniform.setEnabled(false);
                jRadioButtonDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvFixed.setEnabled(false);
                jSpinnerDnaPropinvUniform1.setEnabled(false);
                jSpinnerDnaPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerDnaGammaCategories.setEnabled(true);
                break;

            case 3: //Propinv
                //Adgmma parameter prior
                jRadioButtonDnaAdgmmaUniform.setEnabled(false);
                jRadioButtonDnaAgmmaFixed.setEnabled(false);
                jSpinnerDnaAdgmmaUniform1.setEnabled(false);
                jSpinnerDnaAdgmmaUniform2.setEnabled(false);
                jSpinnerDnaAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonDnaPropinvUniform.setEnabled(true);
                jRadioButtonDnaPropinvFixed.setEnabled(true);
                if(jRadioButtonDnaPropinvUniform.isSelected()){
                    jSpinnerDnaPropinvFixed.setEnabled(false);
                    jSpinnerDnaPropinvUniform1.setEnabled(true);
                    jSpinnerDnaPropinvUniform2.setEnabled(true);
                }
                else if(jRadioButtonDnaPropinvFixed.isSelected()){
                    jSpinnerDnaPropinvFixed.setEnabled(true);
                    jSpinnerDnaPropinvUniform1.setEnabled(false);
                    jSpinnerDnaPropinvUniform2.setEnabled(false);
                }
                //Gamma Categories
                jSpinnerDnaGammaCategories.setEnabled(false);
                break;

            case 4: //InvGamma
                //Adgmma parameter prior
                jRadioButtonDnaAdgmmaUniform.setEnabled(false);
                jRadioButtonDnaAgmmaFixed.setEnabled(false);
                jSpinnerDnaAdgmmaUniform1.setEnabled(false);
                jSpinnerDnaAdgmmaUniform2.setEnabled(false);
                jSpinnerDnaAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonDnaPropinvUniform.setEnabled(true);
                jRadioButtonDnaPropinvFixed.setEnabled(true);
                if(jRadioButtonDnaPropinvUniform.isSelected()){
                    jSpinnerDnaPropinvFixed.setEnabled(false);
                    jSpinnerDnaPropinvUniform1.setEnabled(true);
                    jSpinnerDnaPropinvUniform2.setEnabled(true);
                }
                else if(jRadioButtonDnaPropinvFixed.isSelected()){
                    jSpinnerDnaPropinvFixed.setEnabled(true);
                    jSpinnerDnaPropinvUniform1.setEnabled(false);
                    jSpinnerDnaPropinvUniform2.setEnabled(false);
                }
                //Gamma Categories
                jSpinnerDnaGammaCategories.setEnabled(true);
                break;
            default:
                System.out.println("Erro inesperado - DNA/Rate Variation");
        }
    }//GEN-LAST:event_jComboBoxDnaRateVariationItemStateChanged

    private void jRadioButtonDnaAdgmmaUniformItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDnaAdgmmaUniformItemStateChanged
        if(jRadioButtonDnaAdgmmaUniform.isSelected()){ //Uniform
            jSpinnerDnaAdgmmaFixed.setEnabled(false);
            jSpinnerDnaAdgmmaUniform2.setEnabled(true);
            jSpinnerDnaAdgmmaUniform1.setEnabled(true);
        }

    }//GEN-LAST:event_jRadioButtonDnaAdgmmaUniformItemStateChanged

    private void jRadioButtonDnaAgmmaFixedItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDnaAgmmaFixedItemStateChanged
        if(jRadioButtonDnaAgmmaFixed.isSelected()){ //Fixed
            jSpinnerDnaAdgmmaFixed.setEnabled(true);
            jSpinnerDnaAdgmmaUniform2.setEnabled(false);
            jSpinnerDnaAdgmmaUniform1.setEnabled(false);
        }

    }//GEN-LAST:event_jRadioButtonDnaAgmmaFixedItemStateChanged

    private void jRadioButtonDnaPropinvUniformItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDnaPropinvUniformItemStateChanged
        if(jRadioButtonDnaPropinvUniform.isSelected()){ //Uniform
            jSpinnerDnaPropinvFixed.setEnabled(false);
            jSpinnerDnaPropinvUniform1.setEnabled(true);
            jSpinnerDnaPropinvUniform2.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonDnaPropinvUniformItemStateChanged

    private void jRadioButtonDnaPropinvFixedItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDnaPropinvFixedItemStateChanged
        if(jRadioButtonDnaPropinvFixed.isSelected()){ //Fixed
            jSpinnerDnaPropinvFixed.setEnabled(true);
            jSpinnerDnaPropinvUniform1.setEnabled(false);
            jSpinnerDnaPropinvUniform2.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonDnaPropinvFixedItemStateChanged

    private void jComboBoxProtRateVariationItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxProtRateVariationItemStateChanged
        switch(jComboBoxProtRateVariation.getSelectedIndex()){
            case 0: //Equal
                //Adgmma parameter prior
                jRadioButtonProtAdgammaUniform.setEnabled(false);
                jRadioButtonProtAdgammaFixed.setEnabled(false);
                jSpinnerProtAdgmmaUniform1.setEnabled(false);
                jSpinnerProtAdgmmaUniform2.setEnabled(false);
                jSpinnerProtAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonProtPropinvUniform.setEnabled(false);
                jRadioButtonProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvUniform1.setEnabled(false);
                jSpinnerProtPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerProtGammaCategories.setEnabled(false);
                break;

            case 1: //Gamma
                //Adgmma parameter prior
                jRadioButtonProtAdgammaUniform.setEnabled(false);
                jRadioButtonProtAdgammaFixed.setEnabled(false);
                jSpinnerProtAdgmmaUniform1.setEnabled(false);
                jSpinnerProtAdgmmaUniform2.setEnabled(false);
                jSpinnerProtAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonProtPropinvUniform.setEnabled(false);
                jRadioButtonProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvUniform1.setEnabled(false);
                jSpinnerProtPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerProtGammaCategories.setEnabled(true);
                break;

            case 2: //AdGamma
                //Adgmma parameter prior
                jRadioButtonProtAdgammaUniform.setEnabled(true);
                jRadioButtonProtAdgammaFixed.setEnabled(true);
                if(jRadioButtonProtAdgammaUniform.isSelected()){
                    jSpinnerProtAdgmmaUniform1.setEnabled(true);
                    jSpinnerProtAdgmmaUniform2.setEnabled(true);
                    jSpinnerProtAdgmmaFixed.setEnabled(false);
                }
                else if(jRadioButtonProtAdgammaFixed.isSelected()){
                    jSpinnerProtAdgmmaUniform1.setEnabled(false);
                    jSpinnerProtAdgmmaUniform2.setEnabled(false);
                    jSpinnerProtAdgmmaFixed.setEnabled(true);
                }

                //Propinv prior
                jRadioButtonProtPropinvUniform.setEnabled(false);
                jRadioButtonProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvFixed.setEnabled(false);
                jSpinnerProtPropinvUniform1.setEnabled(false);
                jSpinnerProtPropinvUniform2.setEnabled(false);

                //Gamma Categories
                jSpinnerProtGammaCategories.setEnabled(true);
                break;

            case 3: //Propinv
                //Adgmma parameter prior
                jRadioButtonProtAdgammaUniform.setEnabled(false);
                jRadioButtonProtAdgammaFixed.setEnabled(false);
                jSpinnerProtAdgmmaUniform1.setEnabled(false);
                jSpinnerProtAdgmmaUniform2.setEnabled(false);
                jSpinnerProtAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonProtPropinvUniform.setEnabled(true);
                jRadioButtonProtPropinvFixed.setEnabled(true);
                if(jRadioButtonProtPropinvUniform.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(false);
                    jSpinnerProtPropinvUniform1.setEnabled(true);
                    jSpinnerProtPropinvUniform2.setEnabled(true);
                }
                else if(jRadioButtonProtPropinvFixed.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(true);
                    jSpinnerProtPropinvUniform1.setEnabled(false);
                    jSpinnerProtPropinvUniform2.setEnabled(false);
                }
                //Gamma Categories
                jSpinnerProtGammaCategories.setEnabled(false);
                break;

            case 4: //InvGamma
                //Adgmma parameter prior
                jRadioButtonProtAdgammaUniform.setEnabled(false);
                jRadioButtonProtAdgammaFixed.setEnabled(false);
                jSpinnerProtAdgmmaUniform1.setEnabled(false);
                jSpinnerProtAdgmmaUniform2.setEnabled(false);
                jSpinnerProtAdgmmaFixed.setEnabled(false);

                //Propinv prior
                jRadioButtonProtPropinvUniform.setEnabled(true);
                jRadioButtonProtPropinvFixed.setEnabled(true);
                if(jRadioButtonProtPropinvUniform.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(false);
                    jSpinnerProtPropinvUniform1.setEnabled(true);
                    jSpinnerProtPropinvUniform2.setEnabled(true);
                }
                else if(jRadioButtonProtPropinvFixed.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(true);
                    jSpinnerProtPropinvUniform1.setEnabled(false);
                    jSpinnerProtPropinvUniform2.setEnabled(false);
                }
                //Gamma Categories
                jSpinnerProtGammaCategories.setEnabled(true);
                break;
            default:
                System.out.println("Erro inesperado - Proteina/Rate Variation");
        }
    }//GEN-LAST:event_jComboBoxProtRateVariationItemStateChanged

    private void jRadioButtonProtAdgammaUniformItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonProtAdgammaUniformItemStateChanged
        if(jRadioButtonProtAdgammaUniform.isSelected()){
                    jSpinnerProtAdgmmaUniform1.setEnabled(true);
                    jSpinnerProtAdgmmaUniform2.setEnabled(true);
                    jSpinnerProtAdgmmaFixed.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonProtAdgammaUniformItemStateChanged

    private void jRadioButtonProtAdgammaFixedItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonProtAdgammaFixedItemStateChanged
        if(jRadioButtonProtAdgammaFixed.isSelected()){
                    jSpinnerProtAdgmmaUniform1.setEnabled(false);
                    jSpinnerProtAdgmmaUniform2.setEnabled(false);
                    jSpinnerProtAdgmmaFixed.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonProtAdgammaFixedItemStateChanged

    private void jRadioButtonProtPropinvUniformItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonProtPropinvUniformItemStateChanged
        if(jRadioButtonProtPropinvUniform.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(false);
                    jSpinnerProtPropinvUniform1.setEnabled(true);
                    jSpinnerProtPropinvUniform2.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonProtPropinvUniformItemStateChanged

    private void jRadioButtonProtPropinvFixedItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonProtPropinvFixedItemStateChanged
        if(jRadioButtonProtPropinvFixed.isSelected()){
                    jSpinnerProtPropinvFixed.setEnabled(true);
                    jSpinnerProtPropinvUniform1.setEnabled(false);
                    jSpinnerProtPropinvUniform2.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonProtPropinvFixedItemStateChanged

    private void jRadioButtonFixedRModelItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonFixedRModelItemStateChanged
        jComboBoxFixRateModels.setEnabled(true);
        jComboBoxVarRateModels.setEnabled(false);
        this.jPanelMatrixRate.setName("fixed");
    }//GEN-LAST:event_jRadioButtonFixedRModelItemStateChanged

    private void jRadioButtonVarRateModelsItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonVarRateModelsItemStateChanged
        jComboBoxFixRateModels.setEnabled(false);
        jComboBoxVarRateModels.setEnabled(true);
        this.jPanelMatrixRate.setName("variable");
    }//GEN-LAST:event_jRadioButtonVarRateModelsItemStateChanged

    private void jRadioButtonModelJmpFixRateItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonModelJmpFixRateItemStateChanged
        jComboBoxFixRateModels.setEnabled(false);
        jComboBoxVarRateModels.setEnabled(false);
        this.jPanelMatrixRate.setName("mixed");
    }//GEN-LAST:event_jRadioButtonModelJmpFixRateItemStateChanged

    private void jButtonMcmcAdvancedSettingsActionPerformed1(ActionEvent evt) {//GEN-FIRST:event_jButtonMcmcAdvancedSettingsActionPerformed1
        
    }//GEN-LAST:event_jButtonMcmcAdvancedSettingsActionPerformed1

    private void jButtonMcmcOkActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonMcmcOkActionPerformed

}//GEN-LAST:event_jButtonMcmcOkActionPerformed

    private void jButtonMcmcOkActionPerformed1(ActionEvent evt) {//GEN-FIRST:event_jButtonMcmcOkActionPerformed1
        AdvancedSettingsDialog.setVisible(false);
}//GEN-LAST:event_jButtonMcmcOkActionPerformed1

    private void jCheckBoxStopRuleItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxStopRuleItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            jSpinnerCriticalValueConverge.setEnabled(true);
        }
        else{
            jSpinnerCriticalValueConverge.setEnabled(false);
        }

    }//GEN-LAST:event_jCheckBoxStopRuleItemStateChanged

    private void jRadioButtonUserTreeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonUserTreeItemStateChanged
        if(this.jRadioButtonUserTree.isSelected()){
            jTextFieldNewickTree.setEnabled(true);
            jSpinnerNumRandomPerturbations.setEnabled(true);
            this.jPanelStartingTree.setName("user");
        }

    }//GEN-LAST:event_jRadioButtonUserTreeItemStateChanged

    private void jRadioButtonRandomTreeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRandomTreeItemStateChanged
        if(this.jRadioButtonRandomTree.isSelected()){
            jTextFieldNewickTree.setEnabled(false);
            jSpinnerNumRandomPerturbations.setEnabled(false);
            this.jPanelStartingTree.setName("random");
        }
    }//GEN-LAST:event_jRadioButtonRandomTreeItemStateChanged

    private void jCheckBoxSumParameterItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSumParameterItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            jSpinnerSumpBurnin.setEnabled(true);
            jCheckBoxLikelihoodPlot.setEnabled(true);
            jCheckBoxMarginalModelLikelihood.setEnabled(true);
            jCheckBoxTable.setEnabled(true);
            
        }
        else{
            jSpinnerSumpBurnin.setEnabled(false);
            jCheckBoxLikelihoodPlot.setEnabled(false);
            jCheckBoxMarginalModelLikelihood.setEnabled(false);
            jCheckBoxTable.setEnabled(false);
            
        }
    }//GEN-LAST:event_jCheckBoxSumParameterItemStateChanged

    private void jCheckBoxSumTreeItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSumTreeItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            jSpinnerSumtBurnin.setEnabled(true);
            jSpinnerMinProbabilityPartitions.setEnabled(true);
            jRadioButtonHalfcompat.setEnabled(true);
            jRadioButtonAllcompat.setEnabled(true);
            jCheckBoxCalcTreeProbabilites.setEnabled(true);

        }
        else{
            jSpinnerSumtBurnin.setEnabled(true);
            jSpinnerMinProbabilityPartitions.setEnabled(true);
            jRadioButtonHalfcompat.setEnabled(true);
            jRadioButtonAllcompat.setEnabled(true);
            jCheckBoxCalcTreeProbabilites.setEnabled(true);

        }
    }//GEN-LAST:event_jCheckBoxSumTreeItemStateChanged

    private void jRadioButtonNonClockItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonNonClockItemStateChanged
        this.jSpinnerBranchLenghts.setEnabled(true);
        this.jLayeredPane1.setEnabled(false);
        this.jComboBoxClock.setEnabled(false);

        this.jSpinnerTreeheight.setEnabled(false);
        this.jSpinnerTheta.setEnabled(false);
        this.jComboBoxPloidyLevel.setEnabled(false);
        this.jSpinnerSpeciation.setEnabled(false);
        this.jSpinnerExtiction.setEnabled(false);
        this.jSpinnerSamplingProbability.setEnabled(false);

        this.jPanelTreeTopology.setName("non-clock");
    }//GEN-LAST:event_jRadioButtonNonClockItemStateChanged

    private void jRadioButtonClockItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonClockItemStateChanged
        this.jSpinnerBranchLenghts.setEnabled(false);
        this.jLayeredPane1.setEnabled(true);
        this.jComboBoxClock.setEnabled(true);

        this.jSpinnerTreeheight.setEnabled(true);
        this.jSpinnerTheta.setEnabled(true);
        this.jComboBoxPloidyLevel.setEnabled(true);
        this.jSpinnerSpeciation.setEnabled(true);
        this.jSpinnerExtiction.setEnabled(true);
        this.jSpinnerSamplingProbability.setEnabled(true);

        this.jPanelTreeTopology.setName("clock");
    }//GEN-LAST:event_jRadioButtonClockItemStateChanged

    private void jButtonMcmcCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonMcmcCancelActionPerformed
       jSpinnerMcmcSeed.setValue((long) 1116355510);
       jSpinnerMcmcSwapSeed.setValue((long) 1116355510);
       jCheckBoxMcmcSaveBrlenght.setSelected(true);
       jCheckBoxMcmcOrderTaxa.setSelected(false);
       jSpinnerMcmcDecrease.setValue(0.0);
       jSpinnerMcmcIncrease.setValue(0.0);
       jSpinnerMcmcIncrement.setValue(1.0);
       jRadioButtonMcmcProportionalBurnin.setSelected(true);
       jSpinnerMcmcBurninFraq.setValue(0.25);
       jSpinnerMcmcBurninFraq.setEnabled(true);
       jRadioButtonMcmcSpecificBurnin.setSelected(false);
       jSpinnerMcmcBurninNum.setValue(0);
       jSpinnerMcmcBurninNum.setEnabled(false);
       AdvancedSettingsDialog.setVisible(false);


    }//GEN-LAST:event_jButtonMcmcCancelActionPerformed

    private void jRadioButtonMcmcProportionalBurninItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMcmcProportionalBurninItemStateChanged
       jSpinnerMcmcBurninFraq.setEnabled(true);
       jSpinnerMcmcBurninNum.setEnabled(false);
       this.jPanelMcmcBurnin.setName("proportional");
    }//GEN-LAST:event_jRadioButtonMcmcProportionalBurninItemStateChanged

    private void jRadioButtonMcmcSpecificBurninItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMcmcSpecificBurninItemStateChanged
       jSpinnerMcmcBurninFraq.setEnabled(false);
       jSpinnerMcmcBurninNum.setEnabled(true);
       this.jPanelMcmcBurnin.setName("specific");
    }//GEN-LAST:event_jRadioButtonMcmcSpecificBurninItemStateChanged

    private void jRadioButtonHalfcompatItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHalfcompatItemStateChanged
       this.jPanelConsensusTree.setName("halfcompat");
    }//GEN-LAST:event_jRadioButtonHalfcompatItemStateChanged

    private void jRadioButtonAllcompatItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAllcompatItemStateChanged
        this.jPanelConsensusTree.setName("allcompat");
    }//GEN-LAST:event_jRadioButtonAllcompatItemStateChanged

    private void jSpinnerNumberChainsStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNumberChainsStateChanged
        if(Integer.parseInt(jSpinnerNumberChains.getValue().toString()) < 2){
            this.jSpinnerNumberSwaps.setEnabled(false);
            this.jSpinnerSwapFrequence.setEnabled(false);
        }
        else{
            this.jSpinnerNumberSwaps.setEnabled(true);
            this.jSpinnerSwapFrequence.setEnabled(true);
        }
    }//GEN-LAST:event_jSpinnerNumberChainsStateChanged

    private void jSpinnerNumberRunsStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNumberRunsStateChanged
        if(Integer.parseInt(jSpinnerNumberRuns.getValue().toString()) < 2 ){
            this.jCheckBoxStopRule.setEnabled(false);
            this.jSpinnerCriticalValueConverge.setEnabled(false);
        }
        else{
            this.jCheckBoxStopRule.setEnabled(true);
            if(this.jCheckBoxStopRule.isSelected())
                this.jSpinnerCriticalValueConverge.setEnabled(true);
        }
    }//GEN-LAST:event_jSpinnerNumberRunsStateChanged

    private void jButtonExecuteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
        
        String batch = gerarParametros();
        if(ManipulaArquivo.existeArquivo("batch.nex"))
        ManipulaArquivo.limpaArquivo("batch.nex");

        ManipulaArquivo.gravaArquivo("batch.nex", batch);

        int ngen = Integer.parseInt(jSpinnerNumberCycles.getValue().toString());
        exe = new ExecucaoMrBayes(
                                ngen,
                                jLabelEstimateExe,
                                jLabelOutputMrBayes2,
                                jLabelOutputMrBayes1,
                                jProgressBarExecution,
                                this.jButtonCancelExecution
                                );
        
        exeThread = Executors.newFixedThreadPool(1);
        exeThread.execute(exe);
        
        this.jButtonCancelExecution.setText("Cancelar");
        //this.jDialogExecution.setVisible(true);
        this.jFrameExecution.setVisible(true);
        this.frame.setDefaultCloseOperation(this.frame.DO_NOTHING_ON_CLOSE);
        
        exeThread.shutdown();
 
    }//GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonRestoreDefaultActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonRestoreDefaultActionPerformed
        this.removeAll();
        this.initComponents();
        this.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_jButtonRestoreDefaultActionPerformed

    private void jButtonBeginActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonBeginActionPerformed
        java.awt.CardLayout cl = (java.awt.CardLayout)(frame.getContentPane().getLayout());
        cl.first(frame.getContentPane());
        
    }//GEN-LAST:event_jButtonBeginActionPerformed

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if(InputSequence.getDataType().equals("dna")){
            this.jTabbedPaneModel.setEnabledAt(0, false);
            this.jTabbedPaneModel.setEnabledAt(1, true);
            this.jTabbedPaneModel.setSelectedIndex(1);
            this.setImage(getClass().getResource(
                "/br/uesc/computacao/igrafu/apresentacao/resources/dna20zb.jpg")
                                            );
            this.repaint();
        }
        else if(InputSequence.getDataType().equals("protein")){
            this.jTabbedPaneModel.setEnabledAt(1, false);
            this.jTabbedPaneModel.setEnabledAt(0, true);
            this.jTabbedPaneModel.setSelectedIndex(0);
            this.setImage(getClass().getResource(
                "/br/uesc/computacao/igrafu/apresentacao/resources/proteins.jpg")
                                            );
            this.repaint();
        }

    }//GEN-LAST:event_formComponentShown

    private void jButtonCancelExecutionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonCancelExecutionActionPerformed
        if(this.jButtonCancelExecution.getText().equals("OK")){
            this.jButtonTreeView.setEnabled(true);
            //this.jDialogExecution.setVisible(false);
            this.jFrameExecution.setVisible(false);
        }
        else{
            int i = JOptionPane.showConfirmDialog(
                        jFrameExecution,
                        "Tem certeza que deseja interronper a analise?",
                        "Cancelar Analise", JOptionPane.YES_NO_OPTION
                                            );

            
            if(i == 0){
                exeThread.shutdownNow();
                exe.interroper();

                //this.jDialogExecution.dispose();
                this.jFrameExecution.dispose();
                this.jButtonExecute.setEnabled(true);
                this.frame.setDefaultCloseOperation(this.frame.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_jButtonCancelExecutionActionPerformed

    private void jButtonTreeViewActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonTreeViewActionPerformed
        String treeFile = InputSequence.getFile().getAbsolutePath();
        if(this.jCheckBoxSumTree.isSelected()){
            if(this.jCheckBoxCalcTreeProbabilites.isSelected())
                treeFile += ".trprobs";
        }
        else if(this.jSpinnerNumberRuns.getClass().toString().equals("1"))
            treeFile += ".run.t";
        else
            treeFile += ".run1.t";


        String line;

        try {
            Process p = Runtime.getRuntime().exec("java -jar Programs/FigTree_v1.3.1/lib/figtree.jar " + treeFile);
            BufferedReader input =
            new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((line = input.readLine()) != null) 
                System.out.println(line);

        } catch (IOException ex) {
            System.out.println("ERRO na Visualização");
            Logger.getLogger(MrBayesUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonTreeViewActionPerformed

    private void jFrameExecutionComponentShown(ComponentEvent evt) {//GEN-FIRST:event_jFrameExecutionComponentShown
        jLabelOutputMrBayes1.setText("");
        jLabelOutputMrBayes2.setText("");
        this.jLabelEstimateExe.setText("Iniciando execução...");
        this.jButtonExecute.setEnabled(false);
    }//GEN-LAST:event_jFrameExecutionComponentShown

    private void jProgressBarExecutionStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jProgressBarExecutionStateChanged
        this.jFrameExecution.setTitle(jProgressBarExecution.getString()+" - MrBayes");
    }//GEN-LAST:event_jProgressBarExecutionStateChanged

    private void jFrameExecutionWindowClosing(WindowEvent evt) {//GEN-FIRST:event_jFrameExecutionWindowClosing
        if(this.jButtonCancelExecution.getText().equals("OK")){
                    this.jButtonTreeView.setEnabled(true);
                    //this.jDialogExecution.setVisible(false);
                    this.jFrameExecution.setVisible(false);
        }
        else{
                int i = JOptionPane.showConfirmDialog(
                        jFrameExecution,
                        "Tem certeza que deseja interronper a analise?",
                        "Cancelar Analise", JOptionPane.YES_NO_OPTION
                                                    );


                if(i == 0){
                    exeThread.shutdownNow();
                    exe.interroper();

                    //this.jDialogExecution.dispose();
                    this.jFrameExecution.dispose();
                    this.jButtonExecute.setEnabled(true);
                    this.frame.setDefaultCloseOperation(this.frame.EXIT_ON_CLOSE);
                }
            }
    }//GEN-LAST:event_jFrameExecutionWindowClosing

    /**
     * Realiza a identificação dos parametros definidos na GUI, </br>
     * formata através da classe GeraParametrosMrBayes e devolve </br>
     * a string pronta para ser gravada em disco.
     * 
     * @return String com conteudo completo para arquivo de batch </br>
     * a ser submetido ao MrBayes-3.1.2.
     *
     * @see br.uesc.computacao.igrafu.aplicacao.GeraParametrosMrBayes
     *
     */
    public String gerarParametros(){
        GeraParametrosMrBayes gerar = new GeraParametrosMrBayes();

       /*
        * Espeficico para DNA
        */
       if(InputSequence.getDataType().equals("dna")){

           ArrayList<Integer> ratecorrpr = new ArrayList();
           if(this.jRadioButtonDnaAdgmmaUniform.isSelected()){
               ratecorrpr.add(Integer.parseInt(this.jSpinnerDnaAdgmmaUniform1.getValue().toString()));
               ratecorrpr.add(Integer.parseInt(this.jSpinnerDnaAdgmmaUniform2.getValue().toString()));
           }
           else{
               ratecorrpr.add(Integer.parseInt(this.jSpinnerDnaAdgmmaFixed.getValue().toString()));
           }
           ArrayList<Integer> pinvarpr = new ArrayList();
           if(this.jRadioButtonDnaPropinvUniform.isSelected()){
               pinvarpr.add(Integer.parseInt(this.jSpinnerDnaPropinvUniform1.getValue().toString()));
               pinvarpr.add(Integer.parseInt(this.jSpinnerDnaPropinvUniform2.getValue().toString()));
           }
           else{
               pinvarpr.add(Integer.parseInt(this.jSpinnerDnaPropinvFixed.getValue().toString()));
           }

            gerar.setParamModelo(
                    this.jCheckBoxDnaCovarionModel.isSelected(),
                    this.jComboBoxDnaRateVariation.getSelectedItem().toString(),
                    Integer.parseInt(this.jSpinnerDnaGammaCategories.getValue().toString()),
                    ratecorrpr,
                    pinvarpr
                                );
            
            gerar.setParamDna(
                    this.jComboBoxModelType.getSelectedItem().toString(),
                    this.jComboBoxSubstitutionModel.getSelectedIndex(),
                    this.jComboBoxGeneticCode.getSelectedIndex(),
                    this.jComboBoxOmegaVariation.getSelectedIndex()
                              );

       }


       /*
        * Espeficico para proteina
        */
       if(InputSequence.getDataType().equals("protein")){

           ArrayList<Integer> ratecorrpr = new ArrayList();
           if(this.jRadioButtonProtAdgammaUniform.isSelected()){
               ratecorrpr.add(Integer.parseInt(this.jSpinnerProtAdgmmaUniform1.getValue().toString()));
               ratecorrpr.add(Integer.parseInt(this.jSpinnerProtAdgmmaUniform2.getValue().toString()));
           }
           else{
               ratecorrpr.add(Integer.parseInt(this.jSpinnerProtAdgmmaFixed.getValue().toString()));
           }
           ArrayList<Integer> pinvarpr = new ArrayList();
           if(this.jRadioButtonProtPropinvUniform.isSelected()){
               pinvarpr.add(Integer.parseInt(this.jSpinnerProtPropinvUniform1.getValue().toString()));
               pinvarpr.add(Integer.parseInt(this.jSpinnerProtPropinvUniform2.getValue().toString()));
           }
           else{
               pinvarpr.add(Integer.parseInt(this.jSpinnerProtPropinvFixed.getValue().toString()));
           }

            gerar.setParamModelo(
                    this.jCheckBoxProteinCovarionModel.isSelected(),
                    this.jComboBoxProtRateVariation.getSelectedItem().toString(),
                    Integer.parseInt(this.jSpinnerProtGammaCategories.getValue().toString()),
                    ratecorrpr,
                    pinvarpr
                                );

            gerar.setParamProteina(
                    this.jPanelMatrixRate.getName(),
                    this.jComboBoxFixRateModels.getSelectedIndex(),
                    this.jComboBoxVarRateModels.getSelectedIndex()
                                  );

       }

       /*
        * Geral
        */

       gerar.setParamMcmc(
            Integer.parseInt(this.jSpinnerNumberCycles.getValue().toString()),
            Integer.parseInt(this.jSpinnerNumberRuns.getValue().toString()),
            Integer.parseInt(this.jSpinnerSampleFrequence.getValue().toString()),
            Integer.parseInt(this.jSpinnerNumberChains.getValue().toString()),
            Integer.parseInt(this.jSpinnerSwapFrequence.getValue().toString()),
            Integer.parseInt(this.jSpinnerNumberSwaps.getValue().toString()),
            Integer.parseInt(this.jSpinnerDiagFrequence.getValue().toString()),
            Double.parseDouble(this.jSpinnerMinPartFrequence.getValue().toString()),
            this.jCheckBoxStopRule.isSelected(),
            Double.parseDouble(this.jSpinnerCriticalValueConverge.getValue().toString())
                          );

       gerar.setParamAdvancedMcmc(
            Long.parseLong(this.jSpinnerMcmcSeed.getValue().toString()),
            Long.parseLong(this.jSpinnerMcmcSwapSeed.getValue().toString()),
            this.jCheckBoxMcmcSaveBrlenght.isSelected(),
            this.jCheckBoxMcmcOrderTaxa.isSelected(),
            Double.parseDouble(this.jSpinnerMcmcDecrease.getValue().toString()),
            Double.parseDouble(this.jSpinnerMcmcIncrease.getValue().toString()),
            Double.parseDouble(this.jSpinnerMcmcIncrement.getValue().toString()),
            this.jPanelMcmcBurnin.getName(),
            Double.parseDouble(this.jSpinnerMcmcBurninFraq.getValue().toString()),
            Integer.parseInt(this.jSpinnerMcmcBurninNum.getValue().toString())
                                );

       gerar.setParamArvore(
               this.jPanelStartingTree.getName(),
               this.jTextFieldNewickTree.getText(),
               Integer.parseInt(this.jSpinnerNumRandomPerturbations.getValue().toString()),
               this.jPanelTreeTopology.getName(),
               this.jComboBoxClock.getSelectedIndex(),
               Integer.parseInt(this.jSpinnerBranchLenghts.getValue().toString()),
               Integer.parseInt(this.jSpinnerTreeheight.getValue().toString()),
               Integer.parseInt(this.jSpinnerTheta.getValue().toString()),
               this.jComboBoxPloidyLevel.getSelectedItem().toString(),
               Integer.parseInt(this.jSpinnerSpeciation.getValue().toString()),
               Integer.parseInt(this.jSpinnerSamplingProbability.getValue().toString()),
               Integer.parseInt(this.jSpinnerExtiction.getValue().toString())
                           );

       if(this.jCheckBoxSumParameter.isSelected()){
           gerar.setParamSump(
                Integer.parseInt(this.jSpinnerSumpBurnin.getValue().toString()),
                this.jCheckBoxLikelihoodPlot.isSelected(),
                this.jCheckBoxMarginalModelLikelihood.isSelected(),
                this.jCheckBoxTable.isSelected()
                              );
       }
       if(this.jCheckBoxSumTree.isSelected()){
           gerar.setParamSumt(
                Integer.parseInt(this.jSpinnerSumtBurnin.getValue().toString()),
                Double.parseDouble(this.jSpinnerMinProbabilityPartitions.getValue().toString()),
                this.jPanelConsensusTree.getName(),
                this.jCheckBoxCalcTreeProbabilites.isSelected()
                              );
       }

       return gerar.batchContent();
    }

    /**
     *Define a imagem presente no background do MrBayesUI.
     *
     * @param imageURL - representa a URL de uma imagem, preferencialmente</br>
     * localizada em {@link br.uesc.computacao.apresentacao.resources resources}
     *
     */
    public void setImage(java.net.URL imageURL) {
        bImage = new javax.swing.ImageIcon(imageURL).getImage();
    }


    /**
     * Sobrescreve o metodo de JComponent, para desenhar uma imagem</br>
     * no plano de fundo, definida pelo metodo {@link #setImage(URL)}.
     *
     * @param g
     *
     * @see javax.swing.JComponent
     */
    @Override
    protected void paintComponent(final java.awt.Graphics g){
        super.paintComponent(g);
        g.drawImage(bImage, 0, 0, this.getWidth(), this.getHeight(),  this);
    }

    private ExecucaoMrBayes exe;
    private ExecutorService exeThread;
    private java.awt.Image bImage;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup AdgmmaParamPrior;
    private JDialog AdvancedSettingsDialog;
    private ButtonGroup ConsensusTree;
    private ButtonGroup MatrixRate;
    private ButtonGroup McmcBurnin;
    private ButtonGroup PropinvPrior;
    private ButtonGroup StartingTree;
    private ButtonGroup TreeTopologyPrior;
    private JButton jButtonBegin;
    private JButton jButtonCancelExecution;
    private JButton jButtonExecute;
    private JButton jButtonGoBack;
    private JButton jButtonMcmcAdvancedSettings;
    private JButton jButtonMcmcCancel;
    private JButton jButtonMcmcOk;
    private JButton jButtonRestoreDefault;
    private JButton jButtonTreeView;
    private JCheckBox jCheckBoxCalcTreeProbabilites;
    private JCheckBox jCheckBoxDnaCovarionModel;
    private JCheckBox jCheckBoxLikelihoodPlot;
    private JCheckBox jCheckBoxMarginalModelLikelihood;
    private JCheckBox jCheckBoxMcmcOrderTaxa;
    private JCheckBox jCheckBoxMcmcSaveBrlenght;
    private JCheckBox jCheckBoxProteinCovarionModel;
    private JCheckBox jCheckBoxStopRule;
    private JCheckBox jCheckBoxSumParameter;
    private JCheckBox jCheckBoxSumTree;
    private JCheckBox jCheckBoxTable;
    private JComboBox jComboBoxClock;
    private JComboBox jComboBoxDnaRateVariation;
    private JComboBox jComboBoxFixRateModels;
    private JComboBox jComboBoxGeneticCode;
    private JComboBox jComboBoxModelType;
    private JComboBox jComboBoxOmegaVariation;
    private JComboBox jComboBoxPloidyLevel;
    private JComboBox jComboBoxProtRateVariation;
    private JComboBox jComboBoxSubstitutionModel;
    private JComboBox jComboBoxVarRateModels;
    private JFileChooser jFileChooserSumParam;
    private JFrame jFrameExecution;
    private JLabel jLabelBranchLengths;
    private JLabel jLabelCriticalValueConvergence;
    private JLabel jLabelDiagnFrquence;
    private JLabel jLabelDnaAdgmmaTo;
    private JLabel jLabelDnaGammaCategories;
    private JLabel jLabelDnaPropinvTo;
    private JLabel jLabelDnaRateVariation;
    private JLabel jLabelEstimateExe;
    private JLabel jLabelExtiction;
    private JLabel jLabelGeneticCode;
    private JLabel jLabelMcmcBurninFraq;
    private JLabel jLabelMcmcBurninNum;
    private JLabel jLabelMcmcDecrease;
    private JLabel jLabelMcmcIncrease;
    private JLabel jLabelMcmcIncrement;
    private JLabel jLabelMcmcSeed;
    private JLabel jLabelMcmcSwapSeed;
    private JLabel jLabelMinPartFrequence;
    private JLabel jLabelMinProbabilityPartitions;
    private JLabel jLabelModelType;
    private JLabel jLabelNewickFormatTree;
    private JLabel jLabelNumRandomPerturbations;
    private JLabel jLabelNumberChains;
    private JLabel jLabelNumberCycles;
    private JLabel jLabelNumberRuns;
    private JLabel jLabelNumberSwaps;
    private JLabel jLabelOmegaVariation;
    private JLabel jLabelOutputMrBayes1;
    private JLabel jLabelOutputMrBayes2;
    private JLabel jLabelPloidyLevel;
    private JLabel jLabelProtAdgmmaTo;
    private JLabel jLabelProtGammaCategories;
    private JLabel jLabelProtPropinvTo;
    private JLabel jLabelProtRateVariation;
    private JLabel jLabelSampleFrequence;
    private JLabel jLabelSamplingProbability;
    private JLabel jLabelSpeciation;
    private JLabel jLabelSubstitutionModel;
    private JLabel jLabelSumpBurnin;
    private JLabel jLabelSumtBurnin;
    private JLabel jLabelSwapFrequence;
    private JLabel jLabelTheta;
    private JLabel jLabelTreeTotalHeight;
    private JLayeredPane jLayeredPane1;
    private JPanel jPanel1;
    private JPanel jPanelBirthDeath;
    private JPanel jPanelChains;
    private JPanel jPanelCoalescence;
    private JPanel jPanelCodon;
    private JPanel jPanelConsensusTree;
    private JPanel jPanelDiagnostics;
    private JPanel jPanelDna;
    private JPanel jPanelDnaAdgmmaParameter;
    private JPanel jPanelDnaPropinv;
    private JPanel jPanelMCMC;
    private JPanel jPanelMatrixRate;
    private JPanel jPanelMcmcBurnin;
    private JPanel jPanelMcmcReweight;
    private JPanel jPanelProtAdgmmaParameter;
    private JPanel jPanelProtPropinv;
    private JPanel jPanelProtein;
    private JPanel jPanelSimpleClock;
    private JPanel jPanelStartingTree;
    private JPanel jPanelStopRule;
    private JPanel jPanelSumParameter;
    private JPanel jPanelSumTree;
    private JPanel jPanelSump;
    private JPanel jPanelSumpOutput;
    private JPanel jPanelSumt;
    private JPanel jPanelTree;
    private JPanel jPanelTreeTopology;
    private JPanel jPanelUserTree;
    private JProgressBar jProgressBarExecution;
    private JRadioButton jRadioButtonAllcompat;
    private JRadioButton jRadioButtonClock;
    private JRadioButton jRadioButtonDnaAdgmmaUniform;
    private JRadioButton jRadioButtonDnaAgmmaFixed;
    private JRadioButton jRadioButtonDnaPropinvFixed;
    private JRadioButton jRadioButtonDnaPropinvUniform;
    private JRadioButton jRadioButtonFixedRModel;
    private JRadioButton jRadioButtonHalfcompat;
    private JRadioButton jRadioButtonMcmcProportionalBurnin;
    private JRadioButton jRadioButtonMcmcSpecificBurnin;
    private JRadioButton jRadioButtonModelJmpFixRate;
    private JRadioButton jRadioButtonNonClock;
    private JRadioButton jRadioButtonProtAdgammaFixed;
    private JRadioButton jRadioButtonProtAdgammaUniform;
    private JRadioButton jRadioButtonProtPropinvFixed;
    private JRadioButton jRadioButtonProtPropinvUniform;
    private JRadioButton jRadioButtonRandomTree;
    private JRadioButton jRadioButtonUserTree;
    private JRadioButton jRadioButtonVarRateModels;
    private JSpinner jSpinnerBranchLenghts;
    private JSpinner jSpinnerCriticalValueConverge;
    private JSpinner jSpinnerDiagFrequence;
    private JSpinner jSpinnerDnaAdgmmaFixed;
    private JSpinner jSpinnerDnaAdgmmaUniform1;
    private JSpinner jSpinnerDnaAdgmmaUniform2;
    private JSpinner jSpinnerDnaGammaCategories;
    private JSpinner jSpinnerDnaPropinvFixed;
    private JSpinner jSpinnerDnaPropinvUniform1;
    private JSpinner jSpinnerDnaPropinvUniform2;
    private JSpinner jSpinnerExtiction;
    private JSpinner jSpinnerMcmcBurninFraq;
    private JSpinner jSpinnerMcmcBurninNum;
    private JSpinner jSpinnerMcmcDecrease;
    private JSpinner jSpinnerMcmcIncrease;
    private JSpinner jSpinnerMcmcIncrement;
    private JSpinner jSpinnerMcmcSeed;
    private JSpinner jSpinnerMcmcSwapSeed;
    private JSpinner jSpinnerMinPartFrequence;
    private JSpinner jSpinnerMinProbabilityPartitions;
    private JSpinner jSpinnerNumRandomPerturbations;
    private JSpinner jSpinnerNumberChains;
    private JSpinner jSpinnerNumberCycles;
    private JSpinner jSpinnerNumberRuns;
    private JSpinner jSpinnerNumberSwaps;
    private JSpinner jSpinnerProtAdgmmaFixed;
    private JSpinner jSpinnerProtAdgmmaUniform1;
    private JSpinner jSpinnerProtAdgmmaUniform2;
    private JSpinner jSpinnerProtGammaCategories;
    private JSpinner jSpinnerProtPropinvFixed;
    private JSpinner jSpinnerProtPropinvUniform1;
    private JSpinner jSpinnerProtPropinvUniform2;
    private JSpinner jSpinnerSampleFrequence;
    private JSpinner jSpinnerSamplingProbability;
    private JSpinner jSpinnerSpeciation;
    private JSpinner jSpinnerSumpBurnin;
    private JSpinner jSpinnerSumtBurnin;
    private JSpinner jSpinnerSwapFrequence;
    private JSpinner jSpinnerTheta;
    private JSpinner jSpinnerTreeheight;
    private JTabbedPane jTabbedPaneConfig;
    private JTabbedPane jTabbedPaneModel;
    private JTabbedPane jTabbedPaneSummarize;
    private JTextField jTextFieldNewickTree;
    private JToggleButton jToggleButtonBatchPersonalizado;
    private ButtonGroup proteinAdGamma;
    private ButtonGroup proteinPropinv;
    // End of variables declaration//GEN-END:variables


}
